// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

package org.tensorflow.distruntime;

/**
 * Protobuf type {@code tensorflow.RunGraphRequest}
 */
public final class RunGraphRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.RunGraphRequest)
    RunGraphRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RunGraphRequest.newBuilder() to construct.
  private RunGraphRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RunGraphRequest() {
    sessionHandle_ = "";
    graphHandle_ = "";
    send_ = java.util.Collections.emptyList();
    recvKey_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RunGraphRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RunGraphRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RunGraphRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tensorflow.distruntime.RunGraphRequest.class, org.tensorflow.distruntime.RunGraphRequest.Builder.class);
  }

  public static final int SESSION_HANDLE_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile java.lang.Object sessionHandle_ = "";
  /**
   * <pre>
   * session_handle is the master-generated unique id for this session.
   * If session_handle is non-empty, it must be the same as used when
   * registering the graph. If it is empty, a single global namespace is used to
   * search for the graph_handle.
   * </pre>
   *
   * <code>string session_handle = 8;</code>
   * @return The sessionHandle.
   */
  @java.lang.Override
  public java.lang.String getSessionHandle() {
    java.lang.Object ref = sessionHandle_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      sessionHandle_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * session_handle is the master-generated unique id for this session.
   * If session_handle is non-empty, it must be the same as used when
   * registering the graph. If it is empty, a single global namespace is used to
   * search for the graph_handle.
   * </pre>
   *
   * <code>string session_handle = 8;</code>
   * @return The bytes for sessionHandle.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSessionHandleBytes() {
    java.lang.Object ref = sessionHandle_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sessionHandle_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CREATE_WORKER_SESSION_CALLED_FIELD_NUMBER = 10;
  private boolean createWorkerSessionCalled_ = false;
  /**
   * <pre>
   * Set to true if `CreateWorkerSession` was called for `session_handle`.
   * </pre>
   *
   * <code>bool create_worker_session_called = 10;</code>
   * @return The createWorkerSessionCalled.
   */
  @java.lang.Override
  public boolean getCreateWorkerSessionCalled() {
    return createWorkerSessionCalled_;
  }

  public static final int GRAPH_HANDLE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object graphHandle_ = "";
  /**
   * <pre>
   * REQUIRED: graph_handle must be returned by a RegisterGraph call
   * to the same WorkerService.
   * </pre>
   *
   * <code>string graph_handle = 1;</code>
   * @return The graphHandle.
   */
  @java.lang.Override
  public java.lang.String getGraphHandle() {
    java.lang.Object ref = graphHandle_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      graphHandle_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED: graph_handle must be returned by a RegisterGraph call
   * to the same WorkerService.
   * </pre>
   *
   * <code>string graph_handle = 1;</code>
   * @return The bytes for graphHandle.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGraphHandleBytes() {
    java.lang.Object ref = graphHandle_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      graphHandle_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STEP_ID_FIELD_NUMBER = 2;
  private long stepId_ = 0L;
  /**
   * <pre>
   * A unique ID to distinguish different runs of the same graph.
   * The master generates a global unique `step_id` to distinguish
   * different runs of the graph computation. Subgraphs communicate
   * (e.g., send/recv ops) with each other using `step_id` to
   * distinguish tensors generated by different runs.
   * </pre>
   *
   * <code>int64 step_id = 2;</code>
   * @return The stepId.
   */
  @java.lang.Override
  public long getStepId() {
    return stepId_;
  }

  public static final int EXEC_OPTS_FIELD_NUMBER = 5;
  private org.tensorflow.distruntime.ExecutorOpts execOpts_;
  /**
   * <pre>
   * Options for this step.
   * </pre>
   *
   * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
   * @return Whether the execOpts field is set.
   */
  @java.lang.Override
  public boolean hasExecOpts() {
    return execOpts_ != null;
  }
  /**
   * <pre>
   * Options for this step.
   * </pre>
   *
   * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
   * @return The execOpts.
   */
  @java.lang.Override
  public org.tensorflow.distruntime.ExecutorOpts getExecOpts() {
    return execOpts_ == null ? org.tensorflow.distruntime.ExecutorOpts.getDefaultInstance() : execOpts_;
  }
  /**
   * <pre>
   * Options for this step.
   * </pre>
   *
   * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
   */
  @java.lang.Override
  public org.tensorflow.distruntime.ExecutorOptsOrBuilder getExecOptsOrBuilder() {
    return execOpts_ == null ? org.tensorflow.distruntime.ExecutorOpts.getDefaultInstance() : execOpts_;
  }

  public static final int SEND_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<org.tensorflow.framework.NamedTensorProto> send_;
  /**
   * <pre>
   * Runs the graph.
   * Sends the tensors in "send" into the graph before the run and
   * fetches the keys into `RunGraphResponse.recv` after the run.
   * </pre>
   *
   * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
   */
  @java.lang.Override
  public java.util.List<org.tensorflow.framework.NamedTensorProto> getSendList() {
    return send_;
  }
  /**
   * <pre>
   * Runs the graph.
   * Sends the tensors in "send" into the graph before the run and
   * fetches the keys into `RunGraphResponse.recv` after the run.
   * </pre>
   *
   * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.tensorflow.framework.NamedTensorProtoOrBuilder> 
      getSendOrBuilderList() {
    return send_;
  }
  /**
   * <pre>
   * Runs the graph.
   * Sends the tensors in "send" into the graph before the run and
   * fetches the keys into `RunGraphResponse.recv` after the run.
   * </pre>
   *
   * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
   */
  @java.lang.Override
  public int getSendCount() {
    return send_.size();
  }
  /**
   * <pre>
   * Runs the graph.
   * Sends the tensors in "send" into the graph before the run and
   * fetches the keys into `RunGraphResponse.recv` after the run.
   * </pre>
   *
   * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
   */
  @java.lang.Override
  public org.tensorflow.framework.NamedTensorProto getSend(int index) {
    return send_.get(index);
  }
  /**
   * <pre>
   * Runs the graph.
   * Sends the tensors in "send" into the graph before the run and
   * fetches the keys into `RunGraphResponse.recv` after the run.
   * </pre>
   *
   * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
   */
  @java.lang.Override
  public org.tensorflow.framework.NamedTensorProtoOrBuilder getSendOrBuilder(
      int index) {
    return send_.get(index);
  }

  public static final int RECV_KEY_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList recvKey_;
  /**
   * <code>repeated string recv_key = 4;</code>
   * @return A list containing the recvKey.
   */
  public com.google.protobuf.ProtocolStringList
      getRecvKeyList() {
    return recvKey_;
  }
  /**
   * <code>repeated string recv_key = 4;</code>
   * @return The count of recvKey.
   */
  public int getRecvKeyCount() {
    return recvKey_.size();
  }
  /**
   * <code>repeated string recv_key = 4;</code>
   * @param index The index of the element to return.
   * @return The recvKey at the given index.
   */
  public java.lang.String getRecvKey(int index) {
    return recvKey_.get(index);
  }
  /**
   * <code>repeated string recv_key = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the recvKey at the given index.
   */
  public com.google.protobuf.ByteString
      getRecvKeyBytes(int index) {
    return recvKey_.getByteString(index);
  }

  public static final int IS_PARTIAL_FIELD_NUMBER = 6;
  private boolean isPartial_ = false;
  /**
   * <pre>
   * True if the RunGraphRequest is a partial run request.
   * </pre>
   *
   * <code>bool is_partial = 6;</code>
   * @return The isPartial.
   */
  @java.lang.Override
  public boolean getIsPartial() {
    return isPartial_;
  }

  public static final int IS_LAST_PARTIAL_RUN_FIELD_NUMBER = 7;
  private boolean isLastPartialRun_ = false;
  /**
   * <pre>
   * True if this is the last partial run request in a sequence of requests.
   * </pre>
   *
   * <code>bool is_last_partial_run = 7;</code>
   * @return The isLastPartialRun.
   */
  @java.lang.Override
  public boolean getIsLastPartialRun() {
    return isLastPartialRun_;
  }

  public static final int STORE_ERRORS_IN_RESPONSE_BODY_FIELD_NUMBER = 9;
  private boolean storeErrorsInResponseBody_ = false;
  /**
   * <pre>
   * If true then some errors, e.g., execution errors that have long
   * error messages, may return an OK RunGraphResponse with the actual
   * error saved in the status_code/status_error_message fields of the
   * response body. This is a workaround since the RPC subsystem may
   * truncate long metadata messages.
   * </pre>
   *
   * <code>bool store_errors_in_response_body = 9;</code>
   * @return The storeErrorsInResponseBody.
   */
  @java.lang.Override
  public boolean getStoreErrorsInResponseBody() {
    return storeErrorsInResponseBody_;
  }

  public static final int REQUEST_ID_FIELD_NUMBER = 11;
  private long requestId_ = 0L;
  /**
   * <pre>
   * Unique identifier for this request. Every RunGraphRequest must have a
   * unique request_id, and retried RunGraphRequests must have the same
   * request_id. If request_id is zero, retry detection is disabled.
   * Retried RunGraphRequests are problematic because they may issue a
   * RecvTensor that will have no corresponding sender and will wait forever.
   * Workers use request_ids to reject retried RunGraph requests instead of
   * waiting forever.
   * </pre>
   *
   * <code>int64 request_id = 11;</code>
   * @return The requestId.
   */
  @java.lang.Override
  public long getRequestId() {
    return requestId_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(graphHandle_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, graphHandle_);
    }
    if (stepId_ != 0L) {
      output.writeInt64(2, stepId_);
    }
    for (int i = 0; i < send_.size(); i++) {
      output.writeMessage(3, send_.get(i));
    }
    for (int i = 0; i < recvKey_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, recvKey_.getRaw(i));
    }
    if (execOpts_ != null) {
      output.writeMessage(5, getExecOpts());
    }
    if (isPartial_ != false) {
      output.writeBool(6, isPartial_);
    }
    if (isLastPartialRun_ != false) {
      output.writeBool(7, isLastPartialRun_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionHandle_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, sessionHandle_);
    }
    if (storeErrorsInResponseBody_ != false) {
      output.writeBool(9, storeErrorsInResponseBody_);
    }
    if (createWorkerSessionCalled_ != false) {
      output.writeBool(10, createWorkerSessionCalled_);
    }
    if (requestId_ != 0L) {
      output.writeInt64(11, requestId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(graphHandle_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, graphHandle_);
    }
    if (stepId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, stepId_);
    }
    for (int i = 0; i < send_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, send_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < recvKey_.size(); i++) {
        dataSize += computeStringSizeNoTag(recvKey_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getRecvKeyList().size();
    }
    if (execOpts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getExecOpts());
    }
    if (isPartial_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, isPartial_);
    }
    if (isLastPartialRun_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, isLastPartialRun_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sessionHandle_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, sessionHandle_);
    }
    if (storeErrorsInResponseBody_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, storeErrorsInResponseBody_);
    }
    if (createWorkerSessionCalled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, createWorkerSessionCalled_);
    }
    if (requestId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, requestId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tensorflow.distruntime.RunGraphRequest)) {
      return super.equals(obj);
    }
    org.tensorflow.distruntime.RunGraphRequest other = (org.tensorflow.distruntime.RunGraphRequest) obj;

    if (!getSessionHandle()
        .equals(other.getSessionHandle())) return false;
    if (getCreateWorkerSessionCalled()
        != other.getCreateWorkerSessionCalled()) return false;
    if (!getGraphHandle()
        .equals(other.getGraphHandle())) return false;
    if (getStepId()
        != other.getStepId()) return false;
    if (hasExecOpts() != other.hasExecOpts()) return false;
    if (hasExecOpts()) {
      if (!getExecOpts()
          .equals(other.getExecOpts())) return false;
    }
    if (!getSendList()
        .equals(other.getSendList())) return false;
    if (!getRecvKeyList()
        .equals(other.getRecvKeyList())) return false;
    if (getIsPartial()
        != other.getIsPartial()) return false;
    if (getIsLastPartialRun()
        != other.getIsLastPartialRun()) return false;
    if (getStoreErrorsInResponseBody()
        != other.getStoreErrorsInResponseBody()) return false;
    if (getRequestId()
        != other.getRequestId()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_HANDLE_FIELD_NUMBER;
    hash = (53 * hash) + getSessionHandle().hashCode();
    hash = (37 * hash) + CREATE_WORKER_SESSION_CALLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getCreateWorkerSessionCalled());
    hash = (37 * hash) + GRAPH_HANDLE_FIELD_NUMBER;
    hash = (53 * hash) + getGraphHandle().hashCode();
    hash = (37 * hash) + STEP_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStepId());
    if (hasExecOpts()) {
      hash = (37 * hash) + EXEC_OPTS_FIELD_NUMBER;
      hash = (53 * hash) + getExecOpts().hashCode();
    }
    if (getSendCount() > 0) {
      hash = (37 * hash) + SEND_FIELD_NUMBER;
      hash = (53 * hash) + getSendList().hashCode();
    }
    if (getRecvKeyCount() > 0) {
      hash = (37 * hash) + RECV_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getRecvKeyList().hashCode();
    }
    hash = (37 * hash) + IS_PARTIAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsPartial());
    hash = (37 * hash) + IS_LAST_PARTIAL_RUN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsLastPartialRun());
    hash = (37 * hash) + STORE_ERRORS_IN_RESPONSE_BODY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStoreErrorsInResponseBody());
    hash = (37 * hash) + REQUEST_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getRequestId());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RunGraphRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tensorflow.distruntime.RunGraphRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code tensorflow.RunGraphRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.RunGraphRequest)
      org.tensorflow.distruntime.RunGraphRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RunGraphRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RunGraphRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.distruntime.RunGraphRequest.class, org.tensorflow.distruntime.RunGraphRequest.Builder.class);
    }

    // Construct using org.tensorflow.distruntime.RunGraphRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sessionHandle_ = "";
      createWorkerSessionCalled_ = false;
      graphHandle_ = "";
      stepId_ = 0L;
      execOpts_ = null;
      if (execOptsBuilder_ != null) {
        execOptsBuilder_.dispose();
        execOptsBuilder_ = null;
      }
      if (sendBuilder_ == null) {
        send_ = java.util.Collections.emptyList();
      } else {
        send_ = null;
        sendBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      recvKey_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      isPartial_ = false;
      isLastPartialRun_ = false;
      storeErrorsInResponseBody_ = false;
      requestId_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RunGraphRequest_descriptor;
    }

    @java.lang.Override
    public org.tensorflow.distruntime.RunGraphRequest getDefaultInstanceForType() {
      return org.tensorflow.distruntime.RunGraphRequest.getDefaultInstance();
    }

    @java.lang.Override
    public org.tensorflow.distruntime.RunGraphRequest build() {
      org.tensorflow.distruntime.RunGraphRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.tensorflow.distruntime.RunGraphRequest buildPartial() {
      org.tensorflow.distruntime.RunGraphRequest result = new org.tensorflow.distruntime.RunGraphRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.tensorflow.distruntime.RunGraphRequest result) {
      if (sendBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          send_ = java.util.Collections.unmodifiableList(send_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.send_ = send_;
      } else {
        result.send_ = sendBuilder_.build();
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        recvKey_ = recvKey_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.recvKey_ = recvKey_;
    }

    private void buildPartial0(org.tensorflow.distruntime.RunGraphRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sessionHandle_ = sessionHandle_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.createWorkerSessionCalled_ = createWorkerSessionCalled_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.graphHandle_ = graphHandle_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.stepId_ = stepId_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.execOpts_ = execOptsBuilder_ == null
            ? execOpts_
            : execOptsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.isPartial_ = isPartial_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.isLastPartialRun_ = isLastPartialRun_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.storeErrorsInResponseBody_ = storeErrorsInResponseBody_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.requestId_ = requestId_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tensorflow.distruntime.RunGraphRequest) {
        return mergeFrom((org.tensorflow.distruntime.RunGraphRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tensorflow.distruntime.RunGraphRequest other) {
      if (other == org.tensorflow.distruntime.RunGraphRequest.getDefaultInstance()) return this;
      if (!other.getSessionHandle().isEmpty()) {
        sessionHandle_ = other.sessionHandle_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getCreateWorkerSessionCalled() != false) {
        setCreateWorkerSessionCalled(other.getCreateWorkerSessionCalled());
      }
      if (!other.getGraphHandle().isEmpty()) {
        graphHandle_ = other.graphHandle_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.getStepId() != 0L) {
        setStepId(other.getStepId());
      }
      if (other.hasExecOpts()) {
        mergeExecOpts(other.getExecOpts());
      }
      if (sendBuilder_ == null) {
        if (!other.send_.isEmpty()) {
          if (send_.isEmpty()) {
            send_ = other.send_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSendIsMutable();
            send_.addAll(other.send_);
          }
          onChanged();
        }
      } else {
        if (!other.send_.isEmpty()) {
          if (sendBuilder_.isEmpty()) {
            sendBuilder_.dispose();
            sendBuilder_ = null;
            send_ = other.send_;
            bitField0_ = (bitField0_ & ~0x00000020);
            sendBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSendFieldBuilder() : null;
          } else {
            sendBuilder_.addAllMessages(other.send_);
          }
        }
      }
      if (!other.recvKey_.isEmpty()) {
        if (recvKey_.isEmpty()) {
          recvKey_ = other.recvKey_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureRecvKeyIsMutable();
          recvKey_.addAll(other.recvKey_);
        }
        onChanged();
      }
      if (other.getIsPartial() != false) {
        setIsPartial(other.getIsPartial());
      }
      if (other.getIsLastPartialRun() != false) {
        setIsLastPartialRun(other.getIsLastPartialRun());
      }
      if (other.getStoreErrorsInResponseBody() != false) {
        setStoreErrorsInResponseBody(other.getStoreErrorsInResponseBody());
      }
      if (other.getRequestId() != 0L) {
        setRequestId(other.getRequestId());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              graphHandle_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 10
            case 16: {
              stepId_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 16
            case 26: {
              org.tensorflow.framework.NamedTensorProto m =
                  input.readMessage(
                      org.tensorflow.framework.NamedTensorProto.parser(),
                      extensionRegistry);
              if (sendBuilder_ == null) {
                ensureSendIsMutable();
                send_.add(m);
              } else {
                sendBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureRecvKeyIsMutable();
              recvKey_.add(s);
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getExecOptsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 48: {
              isPartial_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 48
            case 56: {
              isLastPartialRun_ = input.readBool();
              bitField0_ |= 0x00000100;
              break;
            } // case 56
            case 66: {
              sessionHandle_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 66
            case 72: {
              storeErrorsInResponseBody_ = input.readBool();
              bitField0_ |= 0x00000200;
              break;
            } // case 72
            case 80: {
              createWorkerSessionCalled_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 80
            case 88: {
              requestId_ = input.readInt64();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object sessionHandle_ = "";
    /**
     * <pre>
     * session_handle is the master-generated unique id for this session.
     * If session_handle is non-empty, it must be the same as used when
     * registering the graph. If it is empty, a single global namespace is used to
     * search for the graph_handle.
     * </pre>
     *
     * <code>string session_handle = 8;</code>
     * @return The sessionHandle.
     */
    public java.lang.String getSessionHandle() {
      java.lang.Object ref = sessionHandle_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sessionHandle_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * session_handle is the master-generated unique id for this session.
     * If session_handle is non-empty, it must be the same as used when
     * registering the graph. If it is empty, a single global namespace is used to
     * search for the graph_handle.
     * </pre>
     *
     * <code>string session_handle = 8;</code>
     * @return The bytes for sessionHandle.
     */
    public com.google.protobuf.ByteString
        getSessionHandleBytes() {
      java.lang.Object ref = sessionHandle_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sessionHandle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * session_handle is the master-generated unique id for this session.
     * If session_handle is non-empty, it must be the same as used when
     * registering the graph. If it is empty, a single global namespace is used to
     * search for the graph_handle.
     * </pre>
     *
     * <code>string session_handle = 8;</code>
     * @param value The sessionHandle to set.
     * @return This builder for chaining.
     */
    public Builder setSessionHandle(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      sessionHandle_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * session_handle is the master-generated unique id for this session.
     * If session_handle is non-empty, it must be the same as used when
     * registering the graph. If it is empty, a single global namespace is used to
     * search for the graph_handle.
     * </pre>
     *
     * <code>string session_handle = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSessionHandle() {
      sessionHandle_ = getDefaultInstance().getSessionHandle();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * session_handle is the master-generated unique id for this session.
     * If session_handle is non-empty, it must be the same as used when
     * registering the graph. If it is empty, a single global namespace is used to
     * search for the graph_handle.
     * </pre>
     *
     * <code>string session_handle = 8;</code>
     * @param value The bytes for sessionHandle to set.
     * @return This builder for chaining.
     */
    public Builder setSessionHandleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      sessionHandle_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private boolean createWorkerSessionCalled_ ;
    /**
     * <pre>
     * Set to true if `CreateWorkerSession` was called for `session_handle`.
     * </pre>
     *
     * <code>bool create_worker_session_called = 10;</code>
     * @return The createWorkerSessionCalled.
     */
    @java.lang.Override
    public boolean getCreateWorkerSessionCalled() {
      return createWorkerSessionCalled_;
    }
    /**
     * <pre>
     * Set to true if `CreateWorkerSession` was called for `session_handle`.
     * </pre>
     *
     * <code>bool create_worker_session_called = 10;</code>
     * @param value The createWorkerSessionCalled to set.
     * @return This builder for chaining.
     */
    public Builder setCreateWorkerSessionCalled(boolean value) {
      
      createWorkerSessionCalled_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set to true if `CreateWorkerSession` was called for `session_handle`.
     * </pre>
     *
     * <code>bool create_worker_session_called = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearCreateWorkerSessionCalled() {
      bitField0_ = (bitField0_ & ~0x00000002);
      createWorkerSessionCalled_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object graphHandle_ = "";
    /**
     * <pre>
     * REQUIRED: graph_handle must be returned by a RegisterGraph call
     * to the same WorkerService.
     * </pre>
     *
     * <code>string graph_handle = 1;</code>
     * @return The graphHandle.
     */
    public java.lang.String getGraphHandle() {
      java.lang.Object ref = graphHandle_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        graphHandle_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED: graph_handle must be returned by a RegisterGraph call
     * to the same WorkerService.
     * </pre>
     *
     * <code>string graph_handle = 1;</code>
     * @return The bytes for graphHandle.
     */
    public com.google.protobuf.ByteString
        getGraphHandleBytes() {
      java.lang.Object ref = graphHandle_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        graphHandle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED: graph_handle must be returned by a RegisterGraph call
     * to the same WorkerService.
     * </pre>
     *
     * <code>string graph_handle = 1;</code>
     * @param value The graphHandle to set.
     * @return This builder for chaining.
     */
    public Builder setGraphHandle(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      graphHandle_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED: graph_handle must be returned by a RegisterGraph call
     * to the same WorkerService.
     * </pre>
     *
     * <code>string graph_handle = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearGraphHandle() {
      graphHandle_ = getDefaultInstance().getGraphHandle();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED: graph_handle must be returned by a RegisterGraph call
     * to the same WorkerService.
     * </pre>
     *
     * <code>string graph_handle = 1;</code>
     * @param value The bytes for graphHandle to set.
     * @return This builder for chaining.
     */
    public Builder setGraphHandleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      graphHandle_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private long stepId_ ;
    /**
     * <pre>
     * A unique ID to distinguish different runs of the same graph.
     * The master generates a global unique `step_id` to distinguish
     * different runs of the graph computation. Subgraphs communicate
     * (e.g., send/recv ops) with each other using `step_id` to
     * distinguish tensors generated by different runs.
     * </pre>
     *
     * <code>int64 step_id = 2;</code>
     * @return The stepId.
     */
    @java.lang.Override
    public long getStepId() {
      return stepId_;
    }
    /**
     * <pre>
     * A unique ID to distinguish different runs of the same graph.
     * The master generates a global unique `step_id` to distinguish
     * different runs of the graph computation. Subgraphs communicate
     * (e.g., send/recv ops) with each other using `step_id` to
     * distinguish tensors generated by different runs.
     * </pre>
     *
     * <code>int64 step_id = 2;</code>
     * @param value The stepId to set.
     * @return This builder for chaining.
     */
    public Builder setStepId(long value) {
      
      stepId_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique ID to distinguish different runs of the same graph.
     * The master generates a global unique `step_id` to distinguish
     * different runs of the graph computation. Subgraphs communicate
     * (e.g., send/recv ops) with each other using `step_id` to
     * distinguish tensors generated by different runs.
     * </pre>
     *
     * <code>int64 step_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStepId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      stepId_ = 0L;
      onChanged();
      return this;
    }

    private org.tensorflow.distruntime.ExecutorOpts execOpts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.distruntime.ExecutorOpts, org.tensorflow.distruntime.ExecutorOpts.Builder, org.tensorflow.distruntime.ExecutorOptsOrBuilder> execOptsBuilder_;
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     * @return Whether the execOpts field is set.
     */
    public boolean hasExecOpts() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     * @return The execOpts.
     */
    public org.tensorflow.distruntime.ExecutorOpts getExecOpts() {
      if (execOptsBuilder_ == null) {
        return execOpts_ == null ? org.tensorflow.distruntime.ExecutorOpts.getDefaultInstance() : execOpts_;
      } else {
        return execOptsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public Builder setExecOpts(org.tensorflow.distruntime.ExecutorOpts value) {
      if (execOptsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        execOpts_ = value;
      } else {
        execOptsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public Builder setExecOpts(
        org.tensorflow.distruntime.ExecutorOpts.Builder builderForValue) {
      if (execOptsBuilder_ == null) {
        execOpts_ = builderForValue.build();
      } else {
        execOptsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public Builder mergeExecOpts(org.tensorflow.distruntime.ExecutorOpts value) {
      if (execOptsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          execOpts_ != null &&
          execOpts_ != org.tensorflow.distruntime.ExecutorOpts.getDefaultInstance()) {
          getExecOptsBuilder().mergeFrom(value);
        } else {
          execOpts_ = value;
        }
      } else {
        execOptsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public Builder clearExecOpts() {
      bitField0_ = (bitField0_ & ~0x00000010);
      execOpts_ = null;
      if (execOptsBuilder_ != null) {
        execOptsBuilder_.dispose();
        execOptsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public org.tensorflow.distruntime.ExecutorOpts.Builder getExecOptsBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getExecOptsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    public org.tensorflow.distruntime.ExecutorOptsOrBuilder getExecOptsOrBuilder() {
      if (execOptsBuilder_ != null) {
        return execOptsBuilder_.getMessageOrBuilder();
      } else {
        return execOpts_ == null ?
            org.tensorflow.distruntime.ExecutorOpts.getDefaultInstance() : execOpts_;
      }
    }
    /**
     * <pre>
     * Options for this step.
     * </pre>
     *
     * <code>.tensorflow.ExecutorOpts exec_opts = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.distruntime.ExecutorOpts, org.tensorflow.distruntime.ExecutorOpts.Builder, org.tensorflow.distruntime.ExecutorOptsOrBuilder> 
        getExecOptsFieldBuilder() {
      if (execOptsBuilder_ == null) {
        execOptsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tensorflow.distruntime.ExecutorOpts, org.tensorflow.distruntime.ExecutorOpts.Builder, org.tensorflow.distruntime.ExecutorOptsOrBuilder>(
                getExecOpts(),
                getParentForChildren(),
                isClean());
        execOpts_ = null;
      }
      return execOptsBuilder_;
    }

    private java.util.List<org.tensorflow.framework.NamedTensorProto> send_ =
      java.util.Collections.emptyList();
    private void ensureSendIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        send_ = new java.util.ArrayList<org.tensorflow.framework.NamedTensorProto>(send_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tensorflow.framework.NamedTensorProto, org.tensorflow.framework.NamedTensorProto.Builder, org.tensorflow.framework.NamedTensorProtoOrBuilder> sendBuilder_;

    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public java.util.List<org.tensorflow.framework.NamedTensorProto> getSendList() {
      if (sendBuilder_ == null) {
        return java.util.Collections.unmodifiableList(send_);
      } else {
        return sendBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public int getSendCount() {
      if (sendBuilder_ == null) {
        return send_.size();
      } else {
        return sendBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public org.tensorflow.framework.NamedTensorProto getSend(int index) {
      if (sendBuilder_ == null) {
        return send_.get(index);
      } else {
        return sendBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder setSend(
        int index, org.tensorflow.framework.NamedTensorProto value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSendIsMutable();
        send_.set(index, value);
        onChanged();
      } else {
        sendBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder setSend(
        int index, org.tensorflow.framework.NamedTensorProto.Builder builderForValue) {
      if (sendBuilder_ == null) {
        ensureSendIsMutable();
        send_.set(index, builderForValue.build());
        onChanged();
      } else {
        sendBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder addSend(org.tensorflow.framework.NamedTensorProto value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSendIsMutable();
        send_.add(value);
        onChanged();
      } else {
        sendBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder addSend(
        int index, org.tensorflow.framework.NamedTensorProto value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSendIsMutable();
        send_.add(index, value);
        onChanged();
      } else {
        sendBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder addSend(
        org.tensorflow.framework.NamedTensorProto.Builder builderForValue) {
      if (sendBuilder_ == null) {
        ensureSendIsMutable();
        send_.add(builderForValue.build());
        onChanged();
      } else {
        sendBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder addSend(
        int index, org.tensorflow.framework.NamedTensorProto.Builder builderForValue) {
      if (sendBuilder_ == null) {
        ensureSendIsMutable();
        send_.add(index, builderForValue.build());
        onChanged();
      } else {
        sendBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder addAllSend(
        java.lang.Iterable<? extends org.tensorflow.framework.NamedTensorProto> values) {
      if (sendBuilder_ == null) {
        ensureSendIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, send_);
        onChanged();
      } else {
        sendBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder clearSend() {
      if (sendBuilder_ == null) {
        send_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        sendBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public Builder removeSend(int index) {
      if (sendBuilder_ == null) {
        ensureSendIsMutable();
        send_.remove(index);
        onChanged();
      } else {
        sendBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public org.tensorflow.framework.NamedTensorProto.Builder getSendBuilder(
        int index) {
      return getSendFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public org.tensorflow.framework.NamedTensorProtoOrBuilder getSendOrBuilder(
        int index) {
      if (sendBuilder_ == null) {
        return send_.get(index);  } else {
        return sendBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public java.util.List<? extends org.tensorflow.framework.NamedTensorProtoOrBuilder> 
         getSendOrBuilderList() {
      if (sendBuilder_ != null) {
        return sendBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(send_);
      }
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public org.tensorflow.framework.NamedTensorProto.Builder addSendBuilder() {
      return getSendFieldBuilder().addBuilder(
          org.tensorflow.framework.NamedTensorProto.getDefaultInstance());
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public org.tensorflow.framework.NamedTensorProto.Builder addSendBuilder(
        int index) {
      return getSendFieldBuilder().addBuilder(
          index, org.tensorflow.framework.NamedTensorProto.getDefaultInstance());
    }
    /**
     * <pre>
     * Runs the graph.
     * Sends the tensors in "send" into the graph before the run and
     * fetches the keys into `RunGraphResponse.recv` after the run.
     * </pre>
     *
     * <code>repeated .tensorflow.NamedTensorProto send = 3;</code>
     */
    public java.util.List<org.tensorflow.framework.NamedTensorProto.Builder> 
         getSendBuilderList() {
      return getSendFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.tensorflow.framework.NamedTensorProto, org.tensorflow.framework.NamedTensorProto.Builder, org.tensorflow.framework.NamedTensorProtoOrBuilder> 
        getSendFieldBuilder() {
      if (sendBuilder_ == null) {
        sendBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.tensorflow.framework.NamedTensorProto, org.tensorflow.framework.NamedTensorProto.Builder, org.tensorflow.framework.NamedTensorProtoOrBuilder>(
                send_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        send_ = null;
      }
      return sendBuilder_;
    }

    private com.google.protobuf.LazyStringList recvKey_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureRecvKeyIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        recvKey_ = new com.google.protobuf.LazyStringArrayList(recvKey_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @return A list containing the recvKey.
     */
    public com.google.protobuf.ProtocolStringList
        getRecvKeyList() {
      return recvKey_.getUnmodifiableView();
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @return The count of recvKey.
     */
    public int getRecvKeyCount() {
      return recvKey_.size();
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param index The index of the element to return.
     * @return The recvKey at the given index.
     */
    public java.lang.String getRecvKey(int index) {
      return recvKey_.get(index);
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the recvKey at the given index.
     */
    public com.google.protobuf.ByteString
        getRecvKeyBytes(int index) {
      return recvKey_.getByteString(index);
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param index The index to set the value at.
     * @param value The recvKey to set.
     * @return This builder for chaining.
     */
    public Builder setRecvKey(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRecvKeyIsMutable();
      recvKey_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param value The recvKey to add.
     * @return This builder for chaining.
     */
    public Builder addRecvKey(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRecvKeyIsMutable();
      recvKey_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param values The recvKey to add.
     * @return This builder for chaining.
     */
    public Builder addAllRecvKey(
        java.lang.Iterable<java.lang.String> values) {
      ensureRecvKeyIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, recvKey_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearRecvKey() {
      recvKey_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string recv_key = 4;</code>
     * @param value The bytes of the recvKey to add.
     * @return This builder for chaining.
     */
    public Builder addRecvKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureRecvKeyIsMutable();
      recvKey_.add(value);
      onChanged();
      return this;
    }

    private boolean isPartial_ ;
    /**
     * <pre>
     * True if the RunGraphRequest is a partial run request.
     * </pre>
     *
     * <code>bool is_partial = 6;</code>
     * @return The isPartial.
     */
    @java.lang.Override
    public boolean getIsPartial() {
      return isPartial_;
    }
    /**
     * <pre>
     * True if the RunGraphRequest is a partial run request.
     * </pre>
     *
     * <code>bool is_partial = 6;</code>
     * @param value The isPartial to set.
     * @return This builder for chaining.
     */
    public Builder setIsPartial(boolean value) {
      
      isPartial_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if the RunGraphRequest is a partial run request.
     * </pre>
     *
     * <code>bool is_partial = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsPartial() {
      bitField0_ = (bitField0_ & ~0x00000080);
      isPartial_ = false;
      onChanged();
      return this;
    }

    private boolean isLastPartialRun_ ;
    /**
     * <pre>
     * True if this is the last partial run request in a sequence of requests.
     * </pre>
     *
     * <code>bool is_last_partial_run = 7;</code>
     * @return The isLastPartialRun.
     */
    @java.lang.Override
    public boolean getIsLastPartialRun() {
      return isLastPartialRun_;
    }
    /**
     * <pre>
     * True if this is the last partial run request in a sequence of requests.
     * </pre>
     *
     * <code>bool is_last_partial_run = 7;</code>
     * @param value The isLastPartialRun to set.
     * @return This builder for chaining.
     */
    public Builder setIsLastPartialRun(boolean value) {
      
      isLastPartialRun_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * True if this is the last partial run request in a sequence of requests.
     * </pre>
     *
     * <code>bool is_last_partial_run = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsLastPartialRun() {
      bitField0_ = (bitField0_ & ~0x00000100);
      isLastPartialRun_ = false;
      onChanged();
      return this;
    }

    private boolean storeErrorsInResponseBody_ ;
    /**
     * <pre>
     * If true then some errors, e.g., execution errors that have long
     * error messages, may return an OK RunGraphResponse with the actual
     * error saved in the status_code/status_error_message fields of the
     * response body. This is a workaround since the RPC subsystem may
     * truncate long metadata messages.
     * </pre>
     *
     * <code>bool store_errors_in_response_body = 9;</code>
     * @return The storeErrorsInResponseBody.
     */
    @java.lang.Override
    public boolean getStoreErrorsInResponseBody() {
      return storeErrorsInResponseBody_;
    }
    /**
     * <pre>
     * If true then some errors, e.g., execution errors that have long
     * error messages, may return an OK RunGraphResponse with the actual
     * error saved in the status_code/status_error_message fields of the
     * response body. This is a workaround since the RPC subsystem may
     * truncate long metadata messages.
     * </pre>
     *
     * <code>bool store_errors_in_response_body = 9;</code>
     * @param value The storeErrorsInResponseBody to set.
     * @return This builder for chaining.
     */
    public Builder setStoreErrorsInResponseBody(boolean value) {
      
      storeErrorsInResponseBody_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true then some errors, e.g., execution errors that have long
     * error messages, may return an OK RunGraphResponse with the actual
     * error saved in the status_code/status_error_message fields of the
     * response body. This is a workaround since the RPC subsystem may
     * truncate long metadata messages.
     * </pre>
     *
     * <code>bool store_errors_in_response_body = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearStoreErrorsInResponseBody() {
      bitField0_ = (bitField0_ & ~0x00000200);
      storeErrorsInResponseBody_ = false;
      onChanged();
      return this;
    }

    private long requestId_ ;
    /**
     * <pre>
     * Unique identifier for this request. Every RunGraphRequest must have a
     * unique request_id, and retried RunGraphRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RunGraphRequests are problematic because they may issue a
     * RecvTensor that will have no corresponding sender and will wait forever.
     * Workers use request_ids to reject retried RunGraph requests instead of
     * waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 11;</code>
     * @return The requestId.
     */
    @java.lang.Override
    public long getRequestId() {
      return requestId_;
    }
    /**
     * <pre>
     * Unique identifier for this request. Every RunGraphRequest must have a
     * unique request_id, and retried RunGraphRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RunGraphRequests are problematic because they may issue a
     * RecvTensor that will have no corresponding sender and will wait forever.
     * Workers use request_ids to reject retried RunGraph requests instead of
     * waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 11;</code>
     * @param value The requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestId(long value) {
      
      requestId_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique identifier for this request. Every RunGraphRequest must have a
     * unique request_id, and retried RunGraphRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RunGraphRequests are problematic because they may issue a
     * RecvTensor that will have no corresponding sender and will wait forever.
     * Workers use request_ids to reject retried RunGraph requests instead of
     * waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestId() {
      bitField0_ = (bitField0_ & ~0x00000400);
      requestId_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.RunGraphRequest)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.RunGraphRequest)
  private static final org.tensorflow.distruntime.RunGraphRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tensorflow.distruntime.RunGraphRequest();
  }

  public static org.tensorflow.distruntime.RunGraphRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RunGraphRequest>
      PARSER = new com.google.protobuf.AbstractParser<RunGraphRequest>() {
    @java.lang.Override
    public RunGraphRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RunGraphRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RunGraphRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.tensorflow.distruntime.RunGraphRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

