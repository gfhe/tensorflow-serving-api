// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/stream_executor/dnn.proto

package stream_executor.dnn;

public final class Dnn {
  private Dnn() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Specifies the data type used by an operation.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.DataType}
   */
  public enum DataType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>kFloat = 0;</code>
     */
    kFloat(0),
    /**
     * <code>kDouble = 1;</code>
     */
    kDouble(1),
    /**
     * <code>kHalf = 2;</code>
     */
    kHalf(2),
    /**
     * <code>kInt8 = 3;</code>
     */
    kInt8(3),
    /**
     * <code>kInt32 = 4;</code>
     */
    kInt32(4),
    /**
     * <code>kComplexFloat = 5;</code>
     */
    kComplexFloat(5),
    /**
     * <code>kComplexDouble = 6;</code>
     */
    kComplexDouble(6),
    /**
     * <code>kBF16 = 7;</code>
     */
    kBF16(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>kFloat = 0;</code>
     */
    public static final int kFloat_VALUE = 0;
    /**
     * <code>kDouble = 1;</code>
     */
    public static final int kDouble_VALUE = 1;
    /**
     * <code>kHalf = 2;</code>
     */
    public static final int kHalf_VALUE = 2;
    /**
     * <code>kInt8 = 3;</code>
     */
    public static final int kInt8_VALUE = 3;
    /**
     * <code>kInt32 = 4;</code>
     */
    public static final int kInt32_VALUE = 4;
    /**
     * <code>kComplexFloat = 5;</code>
     */
    public static final int kComplexFloat_VALUE = 5;
    /**
     * <code>kComplexDouble = 6;</code>
     */
    public static final int kComplexDouble_VALUE = 6;
    /**
     * <code>kBF16 = 7;</code>
     */
    public static final int kBF16_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataType forNumber(int value) {
      switch (value) {
        case 0: return kFloat;
        case 1: return kDouble;
        case 2: return kHalf;
        case 3: return kInt8;
        case 4: return kInt32;
        case 5: return kComplexFloat;
        case 6: return kComplexDouble;
        case 7: return kBF16;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
            public DataType findValueByNumber(int number) {
              return DataType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(0);
    }

    private static final DataType[] VALUES = values();

    public static DataType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.DataType)
  }

  /**
   * <pre>
   * Describes how a convolution input or output layer's data is formatted.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.DataLayout}
   */
  public enum DataLayout
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Batch &lt;-&gt; batch, or N
     * Depth &lt;-&gt; feature, or channel
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * Note: In cudnn, kBatchDepthYX4 and kBatchDepthYX32 are the same layout
     * (namely, NCHW_VECT_C).  It differentiates between these two by using a
     * different data type (int8x4 vs int8x32).  In StreamExecutor we use
     * different layouts for these, because we don't usually pass an explicit data
     * type to StreamExecutor functions.
     * </pre>
     *
     * <code>kYXDepthBatch = 0;</code>
     */
    kYXDepthBatch(0),
    /**
     * <code>kYXBatchDepth = 1;</code>
     */
    kYXBatchDepth(1),
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kBatchYXDepth = 2;</code>
     */
    kBatchYXDepth(2),
    /**
     * <pre>
     * cuDNN's NCHW layout
     * </pre>
     *
     * <code>kBatchDepthYX = 3;</code>
     */
    kBatchDepthYX(3),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C with 4-elem vectors (e.g. int8x4)
     * </pre>
     *
     * <code>kBatchDepthYX4 = 4;</code>
     */
    kBatchDepthYX4(4),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C with 32-elem vects (e.g. int8x32)
     * </pre>
     *
     * <code>kBatchDepthYX32 = 5;</code>
     */
    kBatchDepthYX32(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Batch &lt;-&gt; batch, or N
     * Depth &lt;-&gt; feature, or channel
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * Note: In cudnn, kBatchDepthYX4 and kBatchDepthYX32 are the same layout
     * (namely, NCHW_VECT_C).  It differentiates between these two by using a
     * different data type (int8x4 vs int8x32).  In StreamExecutor we use
     * different layouts for these, because we don't usually pass an explicit data
     * type to StreamExecutor functions.
     * </pre>
     *
     * <code>kYXDepthBatch = 0;</code>
     */
    public static final int kYXDepthBatch_VALUE = 0;
    /**
     * <code>kYXBatchDepth = 1;</code>
     */
    public static final int kYXBatchDepth_VALUE = 1;
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kBatchYXDepth = 2;</code>
     */
    public static final int kBatchYXDepth_VALUE = 2;
    /**
     * <pre>
     * cuDNN's NCHW layout
     * </pre>
     *
     * <code>kBatchDepthYX = 3;</code>
     */
    public static final int kBatchDepthYX_VALUE = 3;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C with 4-elem vectors (e.g. int8x4)
     * </pre>
     *
     * <code>kBatchDepthYX4 = 4;</code>
     */
    public static final int kBatchDepthYX4_VALUE = 4;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C with 32-elem vects (e.g. int8x32)
     * </pre>
     *
     * <code>kBatchDepthYX32 = 5;</code>
     */
    public static final int kBatchDepthYX32_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataLayout valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataLayout forNumber(int value) {
      switch (value) {
        case 0: return kYXDepthBatch;
        case 1: return kYXBatchDepth;
        case 2: return kBatchYXDepth;
        case 3: return kBatchDepthYX;
        case 4: return kBatchDepthYX4;
        case 5: return kBatchDepthYX32;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataLayout>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataLayout> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataLayout>() {
            public DataLayout findValueByNumber(int number) {
              return DataLayout.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(1);
    }

    private static final DataLayout[] VALUES = values();

    public static DataLayout valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataLayout(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.DataLayout)
  }

  /**
   * <pre>
   * Describes how a convolution filter is laid out in the memory.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.FilterLayout}
   */
  public enum FilterLayout
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Output &lt;-&gt; output feature, or N
     * Input &lt;-&gt; input feature, or N
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kOutputInputYX = 0;</code>
     */
    kOutputInputYX(0),
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kOutputYXInput = 1;</code>
     */
    kOutputYXInput(1),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout with 4-elem vectors
     * </pre>
     *
     * <code>kOutputInputYX4 = 2;</code>
     */
    kOutputInputYX4(2),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout with 32-elem vectors
     * </pre>
     *
     * <code>kOutputInputYX32 = 5;</code>
     */
    kOutputInputYX32(5),
    /**
     * <code>kInputYXOutput = 3;</code>
     */
    kInputYXOutput(3),
    /**
     * <code>kYXInputOutput = 4;</code>
     */
    kYXInputOutput(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Output &lt;-&gt; output feature, or N
     * Input &lt;-&gt; input feature, or N
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kOutputInputYX = 0;</code>
     */
    public static final int kOutputInputYX_VALUE = 0;
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kOutputYXInput = 1;</code>
     */
    public static final int kOutputYXInput_VALUE = 1;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout with 4-elem vectors
     * </pre>
     *
     * <code>kOutputInputYX4 = 2;</code>
     */
    public static final int kOutputInputYX4_VALUE = 2;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout with 32-elem vectors
     * </pre>
     *
     * <code>kOutputInputYX32 = 5;</code>
     */
    public static final int kOutputInputYX32_VALUE = 5;
    /**
     * <code>kInputYXOutput = 3;</code>
     */
    public static final int kInputYXOutput_VALUE = 3;
    /**
     * <code>kYXInputOutput = 4;</code>
     */
    public static final int kYXInputOutput_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FilterLayout valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FilterLayout forNumber(int value) {
      switch (value) {
        case 0: return kOutputInputYX;
        case 1: return kOutputYXInput;
        case 2: return kOutputInputYX4;
        case 5: return kOutputInputYX32;
        case 3: return kInputYXOutput;
        case 4: return kYXInputOutput;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FilterLayout>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FilterLayout> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FilterLayout>() {
            public FilterLayout findValueByNumber(int number) {
              return FilterLayout.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(2);
    }

    private static final FilterLayout[] VALUES = values();

    public static FilterLayout valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FilterLayout(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.FilterLayout)
  }

  /**
   * <pre>
   * Describes a kind of non-linearity (threshold-like mathematical function).
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.ActivationMode}
   */
  public enum ActivationMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>kNone = 0;</code>
     */
    kNone(0),
    /**
     * <code>kSigmoid = 1;</code>
     */
    kSigmoid(1),
    /**
     * <pre>
     * Rectified linear activation: f(x) = x &lt; 0 ? 0 : x
     * </pre>
     *
     * <code>kRelu = 2;</code>
     */
    kRelu(2),
    /**
     * <pre>
     * Rectified linear activation; where upper maximum is 6.0.
     * </pre>
     *
     * <code>kRelu6 = 3;</code>
     */
    kRelu6(3),
    /**
     * <pre>
     * Rectified linear activation; where upper maximum specified by
     * BatchDescriptor::value_max().
     * </pre>
     *
     * <code>kReluX = 4;</code>
     */
    kReluX(4),
    /**
     * <code>kTanh = 5;</code>
     */
    kTanh(5),
    /**
     * <pre>
     * Like ReluX; but passes all values in the range [-X,X].
     * </pre>
     *
     * <code>kBandPass = 6;</code>
     */
    kBandPass(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>kNone = 0;</code>
     */
    public static final int kNone_VALUE = 0;
    /**
     * <code>kSigmoid = 1;</code>
     */
    public static final int kSigmoid_VALUE = 1;
    /**
     * <pre>
     * Rectified linear activation: f(x) = x &lt; 0 ? 0 : x
     * </pre>
     *
     * <code>kRelu = 2;</code>
     */
    public static final int kRelu_VALUE = 2;
    /**
     * <pre>
     * Rectified linear activation; where upper maximum is 6.0.
     * </pre>
     *
     * <code>kRelu6 = 3;</code>
     */
    public static final int kRelu6_VALUE = 3;
    /**
     * <pre>
     * Rectified linear activation; where upper maximum specified by
     * BatchDescriptor::value_max().
     * </pre>
     *
     * <code>kReluX = 4;</code>
     */
    public static final int kReluX_VALUE = 4;
    /**
     * <code>kTanh = 5;</code>
     */
    public static final int kTanh_VALUE = 5;
    /**
     * <pre>
     * Like ReluX; but passes all values in the range [-X,X].
     * </pre>
     *
     * <code>kBandPass = 6;</code>
     */
    public static final int kBandPass_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ActivationMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ActivationMode forNumber(int value) {
      switch (value) {
        case 0: return kNone;
        case 1: return kSigmoid;
        case 2: return kRelu;
        case 3: return kRelu6;
        case 4: return kReluX;
        case 5: return kTanh;
        case 6: return kBandPass;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActivationMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ActivationMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActivationMode>() {
            public ActivationMode findValueByNumber(int number) {
              return ActivationMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(3);
    }

    private static final ActivationMode[] VALUES = values();

    public static ActivationMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ActivationMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ActivationMode)
  }

  /**
   * <pre>
   * Describe the math definition for the conv op. The popular behavior is
   * actually called cross-correlation in math, despite the operation is often
   * referred as convolution. See cuDNN cudnnConvolutionMode_t.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.ConvolutionMode}
   */
  public enum ConvolutionMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CROSS_CORRELATION = 0;</code>
     */
    CROSS_CORRELATION(0),
    /**
     * <code>CONVOLUTION = 1;</code>
     */
    CONVOLUTION(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CROSS_CORRELATION = 0;</code>
     */
    public static final int CROSS_CORRELATION_VALUE = 0;
    /**
     * <code>CONVOLUTION = 1;</code>
     */
    public static final int CONVOLUTION_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConvolutionMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConvolutionMode forNumber(int value) {
      switch (value) {
        case 0: return CROSS_CORRELATION;
        case 1: return CONVOLUTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConvolutionMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConvolutionMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConvolutionMode>() {
            public ConvolutionMode findValueByNumber(int number) {
              return ConvolutionMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(4);
    }

    private static final ConvolutionMode[] VALUES = values();

    public static ConvolutionMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConvolutionMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ConvolutionMode)
  }

  /**
   * Protobuf enum {@code stream_executor.dnn.ConvolutionKind}
   */
  public enum ConvolutionKind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INVALID = 0;</code>
     */
    INVALID(0),
    /**
     * <code>FORWARD = 1;</code>
     */
    FORWARD(1),
    /**
     * <code>BACKWARD_FILTER = 2;</code>
     */
    BACKWARD_FILTER(2),
    /**
     * <code>BACKWARD_DATA = 3;</code>
     */
    BACKWARD_DATA(3),
    /**
     * <code>FORWARD_BIAS_ACTIVATION = 4;</code>
     */
    FORWARD_BIAS_ACTIVATION(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>INVALID = 0;</code>
     */
    public static final int INVALID_VALUE = 0;
    /**
     * <code>FORWARD = 1;</code>
     */
    public static final int FORWARD_VALUE = 1;
    /**
     * <code>BACKWARD_FILTER = 2;</code>
     */
    public static final int BACKWARD_FILTER_VALUE = 2;
    /**
     * <code>BACKWARD_DATA = 3;</code>
     */
    public static final int BACKWARD_DATA_VALUE = 3;
    /**
     * <code>FORWARD_BIAS_ACTIVATION = 4;</code>
     */
    public static final int FORWARD_BIAS_ACTIVATION_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConvolutionKind valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConvolutionKind forNumber(int value) {
      switch (value) {
        case 0: return INVALID;
        case 1: return FORWARD;
        case 2: return BACKWARD_FILTER;
        case 3: return BACKWARD_DATA;
        case 4: return FORWARD_BIAS_ACTIVATION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConvolutionKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConvolutionKind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConvolutionKind>() {
            public ConvolutionKind findValueByNumber(int number) {
              return ConvolutionKind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(5);
    }

    private static final ConvolutionKind[] VALUES = values();

    public static ConvolutionKind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConvolutionKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ConvolutionKind)
  }

  public interface TensorDescriptorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.TensorDescriptorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @return A list containing the dimensions.
     */
    java.util.List<java.lang.Long> getDimensionsList();
    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @return The count of dimensions.
     */
    int getDimensionsCount();
    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @param index The index of the element to return.
     * @return The dimensions at the given index.
     */
    long getDimensions(int index);

    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     * @return The enum numeric value on the wire for dataType.
     */
    int getDataTypeValue();
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     * @return The dataType.
     */
    stream_executor.dnn.Dnn.DataType getDataType();

    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return Whether the dataLayout field is set.
     */
    boolean hasDataLayout();
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return The enum numeric value on the wire for dataLayout.
     */
    int getDataLayoutValue();
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return The dataLayout.
     */
    stream_executor.dnn.Dnn.DataLayout getDataLayout();

    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return Whether the filterLayout field is set.
     */
    boolean hasFilterLayout();
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return The enum numeric value on the wire for filterLayout.
     */
    int getFilterLayoutValue();
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return The filterLayout.
     */
    stream_executor.dnn.Dnn.FilterLayout getFilterLayout();

    public stream_executor.dnn.Dnn.TensorDescriptorProto.LayoutOneofCase getLayoutOneofCase();
  }
  /**
   * <pre>
   * Generic tensor representation.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.TensorDescriptorProto}
   */
  public static final class TensorDescriptorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.TensorDescriptorProto)
      TensorDescriptorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorDescriptorProto.newBuilder() to construct.
    private TensorDescriptorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorDescriptorProto() {
      dimensions_ = emptyLongList();
      dataType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TensorDescriptorProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.TensorDescriptorProto.class, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder.class);
    }

    private int layoutOneofCase_ = 0;
    private java.lang.Object layoutOneof_;
    public enum LayoutOneofCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      DATA_LAYOUT(3),
      FILTER_LAYOUT(4),
      LAYOUTONEOF_NOT_SET(0);
      private final int value;
      private LayoutOneofCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LayoutOneofCase valueOf(int value) {
        return forNumber(value);
      }

      public static LayoutOneofCase forNumber(int value) {
        switch (value) {
          case 3: return DATA_LAYOUT;
          case 4: return FILTER_LAYOUT;
          case 0: return LAYOUTONEOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public LayoutOneofCase
    getLayoutOneofCase() {
      return LayoutOneofCase.forNumber(
          layoutOneofCase_);
    }

    public static final int DIMENSIONS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList dimensions_;
    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @return A list containing the dimensions.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getDimensionsList() {
      return dimensions_;
    }
    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @return The count of dimensions.
     */
    public int getDimensionsCount() {
      return dimensions_.size();
    }
    /**
     * <code>repeated int64 dimensions = 1;</code>
     * @param index The index of the element to return.
     * @return The dimensions at the given index.
     */
    public long getDimensions(int index) {
      return dimensions_.getLong(index);
    }
    private int dimensionsMemoizedSerializedSize = -1;

    public static final int DATA_TYPE_FIELD_NUMBER = 2;
    private int dataType_ = 0;
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     * @return The enum numeric value on the wire for dataType.
     */
    @java.lang.Override public int getDataTypeValue() {
      return dataType_;
    }
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     * @return The dataType.
     */
    @java.lang.Override public stream_executor.dnn.Dnn.DataType getDataType() {
      stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.forNumber(dataType_);
      return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
    }

    public static final int DATA_LAYOUT_FIELD_NUMBER = 3;
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return Whether the dataLayout field is set.
     */
    public boolean hasDataLayout() {
      return layoutOneofCase_ == 3;
    }
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return The enum numeric value on the wire for dataLayout.
     */
    public int getDataLayoutValue() {
      if (layoutOneofCase_ == 3) {
        return (java.lang.Integer) layoutOneof_;
      }
      return 0;
    }
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     * @return The dataLayout.
     */
    public stream_executor.dnn.Dnn.DataLayout getDataLayout() {
      if (layoutOneofCase_ == 3) {
        stream_executor.dnn.Dnn.DataLayout result = stream_executor.dnn.Dnn.DataLayout.forNumber(
            (java.lang.Integer) layoutOneof_);
        return result == null ? stream_executor.dnn.Dnn.DataLayout.UNRECOGNIZED : result;
      }
      return stream_executor.dnn.Dnn.DataLayout.kYXDepthBatch;
    }

    public static final int FILTER_LAYOUT_FIELD_NUMBER = 4;
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return Whether the filterLayout field is set.
     */
    public boolean hasFilterLayout() {
      return layoutOneofCase_ == 4;
    }
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return The enum numeric value on the wire for filterLayout.
     */
    public int getFilterLayoutValue() {
      if (layoutOneofCase_ == 4) {
        return (java.lang.Integer) layoutOneof_;
      }
      return 0;
    }
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     * @return The filterLayout.
     */
    public stream_executor.dnn.Dnn.FilterLayout getFilterLayout() {
      if (layoutOneofCase_ == 4) {
        stream_executor.dnn.Dnn.FilterLayout result = stream_executor.dnn.Dnn.FilterLayout.forNumber(
            (java.lang.Integer) layoutOneof_);
        return result == null ? stream_executor.dnn.Dnn.FilterLayout.UNRECOGNIZED : result;
      }
      return stream_executor.dnn.Dnn.FilterLayout.kOutputInputYX;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDimensionsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(dimensionsMemoizedSerializedSize);
      }
      for (int i = 0; i < dimensions_.size(); i++) {
        output.writeInt64NoTag(dimensions_.getLong(i));
      }
      if (dataType_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        output.writeEnum(2, dataType_);
      }
      if (layoutOneofCase_ == 3) {
        output.writeEnum(3, ((java.lang.Integer) layoutOneof_));
      }
      if (layoutOneofCase_ == 4) {
        output.writeEnum(4, ((java.lang.Integer) layoutOneof_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dimensions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dimensions_.getLong(i));
        }
        size += dataSize;
        if (!getDimensionsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dimensionsMemoizedSerializedSize = dataSize;
      }
      if (dataType_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dataType_);
      }
      if (layoutOneofCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, ((java.lang.Integer) layoutOneof_));
      }
      if (layoutOneofCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, ((java.lang.Integer) layoutOneof_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.TensorDescriptorProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.TensorDescriptorProto other = (stream_executor.dnn.Dnn.TensorDescriptorProto) obj;

      if (!getDimensionsList()
          .equals(other.getDimensionsList())) return false;
      if (dataType_ != other.dataType_) return false;
      if (!getLayoutOneofCase().equals(other.getLayoutOneofCase())) return false;
      switch (layoutOneofCase_) {
        case 3:
          if (getDataLayoutValue()
              != other.getDataLayoutValue()) return false;
          break;
        case 4:
          if (getFilterLayoutValue()
              != other.getFilterLayoutValue()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimensionsCount() > 0) {
        hash = (37 * hash) + DIMENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionsList().hashCode();
      }
      hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + dataType_;
      switch (layoutOneofCase_) {
        case 3:
          hash = (37 * hash) + DATA_LAYOUT_FIELD_NUMBER;
          hash = (53 * hash) + getDataLayoutValue();
          break;
        case 4:
          hash = (37 * hash) + FILTER_LAYOUT_FIELD_NUMBER;
          hash = (53 * hash) + getFilterLayoutValue();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.TensorDescriptorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Generic tensor representation.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.TensorDescriptorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.TensorDescriptorProto)
        stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.TensorDescriptorProto.class, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.TensorDescriptorProto.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        dimensions_ = emptyLongList();
        dataType_ = 0;
        layoutOneofCase_ = 0;
        layoutOneof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto build() {
        stream_executor.dnn.Dnn.TensorDescriptorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto buildPartial() {
        stream_executor.dnn.Dnn.TensorDescriptorProto result = new stream_executor.dnn.Dnn.TensorDescriptorProto(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(stream_executor.dnn.Dnn.TensorDescriptorProto result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          dimensions_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dimensions_ = dimensions_;
      }

      private void buildPartial0(stream_executor.dnn.Dnn.TensorDescriptorProto result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.dataType_ = dataType_;
        }
      }

      private void buildPartialOneofs(stream_executor.dnn.Dnn.TensorDescriptorProto result) {
        result.layoutOneofCase_ = layoutOneofCase_;
        result.layoutOneof_ = this.layoutOneof_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.TensorDescriptorProto) {
          return mergeFrom((stream_executor.dnn.Dnn.TensorDescriptorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.TensorDescriptorProto other) {
        if (other == stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance()) return this;
        if (!other.dimensions_.isEmpty()) {
          if (dimensions_.isEmpty()) {
            dimensions_ = other.dimensions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimensionsIsMutable();
            dimensions_.addAll(other.dimensions_);
          }
          onChanged();
        }
        if (other.dataType_ != 0) {
          setDataTypeValue(other.getDataTypeValue());
        }
        switch (other.getLayoutOneofCase()) {
          case DATA_LAYOUT: {
            setDataLayoutValue(other.getDataLayoutValue());
            break;
          }
          case FILTER_LAYOUT: {
            setFilterLayoutValue(other.getFilterLayoutValue());
            break;
          }
          case LAYOUTONEOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                long v = input.readInt64();
                ensureDimensionsIsMutable();
                dimensions_.addLong(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDimensionsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  dimensions_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 16: {
                dataType_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                int rawValue = input.readEnum();
                layoutOneofCase_ = 3;
                layoutOneof_ = rawValue;
                break;
              } // case 24
              case 32: {
                int rawValue = input.readEnum();
                layoutOneofCase_ = 4;
                layoutOneof_ = rawValue;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int layoutOneofCase_ = 0;
      private java.lang.Object layoutOneof_;
      public LayoutOneofCase
          getLayoutOneofCase() {
        return LayoutOneofCase.forNumber(
            layoutOneofCase_);
      }

      public Builder clearLayoutOneof() {
        layoutOneofCase_ = 0;
        layoutOneof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.Internal.LongList dimensions_ = emptyLongList();
      private void ensureDimensionsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dimensions_ = mutableCopy(dimensions_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @return A list containing the dimensions.
       */
      public java.util.List<java.lang.Long>
          getDimensionsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(dimensions_) : dimensions_;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @return The count of dimensions.
       */
      public int getDimensionsCount() {
        return dimensions_.size();
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @param index The index of the element to return.
       * @return The dimensions at the given index.
       */
      public long getDimensions(int index) {
        return dimensions_.getLong(index);
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @param index The index to set the value at.
       * @param value The dimensions to set.
       * @return This builder for chaining.
       */
      public Builder setDimensions(
          int index, long value) {
        
        ensureDimensionsIsMutable();
        dimensions_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @param value The dimensions to add.
       * @return This builder for chaining.
       */
      public Builder addDimensions(long value) {
        
        ensureDimensionsIsMutable();
        dimensions_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @param values The dimensions to add.
       * @return This builder for chaining.
       */
      public Builder addAllDimensions(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimensionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dimensions_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDimensions() {
        dimensions_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int dataType_ = 0;
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       * @return The enum numeric value on the wire for dataType.
       */
      @java.lang.Override public int getDataTypeValue() {
        return dataType_;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       * @param value The enum numeric value on the wire for dataType to set.
       * @return This builder for chaining.
       */
      public Builder setDataTypeValue(int value) {
        dataType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       * @return The dataType.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.DataType getDataType() {
        stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.forNumber(dataType_);
        return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       * @param value The dataType to set.
       * @return This builder for chaining.
       */
      public Builder setDataType(stream_executor.dnn.Dnn.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dataType_ = 0;
        onChanged();
        return this;
      }

      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @return Whether the dataLayout field is set.
       */
      @java.lang.Override
      public boolean hasDataLayout() {
        return layoutOneofCase_ == 3;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @return The enum numeric value on the wire for dataLayout.
       */
      @java.lang.Override
      public int getDataLayoutValue() {
        if (layoutOneofCase_ == 3) {
          return ((java.lang.Integer) layoutOneof_).intValue();
        }
        return 0;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @param value The enum numeric value on the wire for dataLayout to set.
       * @return This builder for chaining.
       */
      public Builder setDataLayoutValue(int value) {
        layoutOneofCase_ = 3;
        layoutOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @return The dataLayout.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.DataLayout getDataLayout() {
        if (layoutOneofCase_ == 3) {
          stream_executor.dnn.Dnn.DataLayout result = stream_executor.dnn.Dnn.DataLayout.forNumber(
              (java.lang.Integer) layoutOneof_);
          return result == null ? stream_executor.dnn.Dnn.DataLayout.UNRECOGNIZED : result;
        }
        return stream_executor.dnn.Dnn.DataLayout.kYXDepthBatch;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @param value The dataLayout to set.
       * @return This builder for chaining.
       */
      public Builder setDataLayout(stream_executor.dnn.Dnn.DataLayout value) {
        if (value == null) {
          throw new NullPointerException();
        }
        layoutOneofCase_ = 3;
        layoutOneof_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataLayout() {
        if (layoutOneofCase_ == 3) {
          layoutOneofCase_ = 0;
          layoutOneof_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @return Whether the filterLayout field is set.
       */
      @java.lang.Override
      public boolean hasFilterLayout() {
        return layoutOneofCase_ == 4;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @return The enum numeric value on the wire for filterLayout.
       */
      @java.lang.Override
      public int getFilterLayoutValue() {
        if (layoutOneofCase_ == 4) {
          return ((java.lang.Integer) layoutOneof_).intValue();
        }
        return 0;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @param value The enum numeric value on the wire for filterLayout to set.
       * @return This builder for chaining.
       */
      public Builder setFilterLayoutValue(int value) {
        layoutOneofCase_ = 4;
        layoutOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @return The filterLayout.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.FilterLayout getFilterLayout() {
        if (layoutOneofCase_ == 4) {
          stream_executor.dnn.Dnn.FilterLayout result = stream_executor.dnn.Dnn.FilterLayout.forNumber(
              (java.lang.Integer) layoutOneof_);
          return result == null ? stream_executor.dnn.Dnn.FilterLayout.UNRECOGNIZED : result;
        }
        return stream_executor.dnn.Dnn.FilterLayout.kOutputInputYX;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @param value The filterLayout to set.
       * @return This builder for chaining.
       */
      public Builder setFilterLayout(stream_executor.dnn.Dnn.FilterLayout value) {
        if (value == null) {
          throw new NullPointerException();
        }
        layoutOneofCase_ = 4;
        layoutOneof_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFilterLayout() {
        if (layoutOneofCase_ == 4) {
          layoutOneofCase_ = 0;
          layoutOneof_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.TensorDescriptorProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.TensorDescriptorProto)
    private static final stream_executor.dnn.Dnn.TensorDescriptorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.TensorDescriptorProto();
    }

    public static stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TensorDescriptorProto>
        PARSER = new com.google.protobuf.AbstractParser<TensorDescriptorProto>() {
      @java.lang.Override
      public TensorDescriptorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TensorDescriptorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorDescriptorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AlgorithmProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.AlgorithmProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 algo_id = 1;</code>
     * @return The algoId.
     */
    long getAlgoId();

    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     * @return The enum numeric value on the wire for mathType.
     */
    int getMathTypeValue();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     * @return The mathType.
     */
    stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType();

    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    int getTuningKnobsCount();
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    boolean containsTuningKnobs(
        long key);
    /**
     * Use {@link #getTuningKnobsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getTuningKnobs();
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getTuningKnobsMap();
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    long getTuningKnobsOrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    long getTuningKnobsOrThrow(
        long key);

    /**
     * <pre>
     * Legacy algorithm enums and cuDNN Frontend engine numbers need to coexist in
     * the same proto medium-term, until we can be confident of no longer needing
     * the legacy cuDNN convolution API.  Once the migration is complete, we can
     * stop producing legacy algorithm enums and remove this field.
     * </pre>
     *
     * <code>bool is_cudnn_frontend = 5;</code>
     * @return The isCudnnFrontend.
     */
    boolean getIsCudnnFrontend();

    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     * @return Whether the workspaceSize field is set.
     */
    boolean hasWorkspaceSize();
    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     * @return The workspaceSize.
     */
    com.google.protobuf.UInt64Value getWorkspaceSize();
    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     */
    com.google.protobuf.UInt64ValueOrBuilder getWorkspaceSizeOrBuilder();
  }
  /**
   * <pre>
   * Generic algorithm representation.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.AlgorithmProto}
   */
  public static final class AlgorithmProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.AlgorithmProto)
      AlgorithmProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AlgorithmProto.newBuilder() to construct.
    private AlgorithmProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AlgorithmProto() {
      mathType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AlgorithmProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetTuningKnobs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.AlgorithmProto.class, stream_executor.dnn.Dnn.AlgorithmProto.Builder.class);
    }

    /**
     * Protobuf enum {@code stream_executor.dnn.AlgorithmProto.MathType}
     */
    public enum MathType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT_MATH = 0;</code>
       */
      DEFAULT_MATH(0),
      /**
       * <pre>
       * The GPU may operate 4x4 matrix FMA.
       * See cuDNN's documentation for CUDNN_TENSOR_OP_MATH.
       * </pre>
       *
       * <code>TENSOR_OP_MATH = 1;</code>
       */
      TENSOR_OP_MATH(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DEFAULT_MATH = 0;</code>
       */
      public static final int DEFAULT_MATH_VALUE = 0;
      /**
       * <pre>
       * The GPU may operate 4x4 matrix FMA.
       * See cuDNN's documentation for CUDNN_TENSOR_OP_MATH.
       * </pre>
       *
       * <code>TENSOR_OP_MATH = 1;</code>
       */
      public static final int TENSOR_OP_MATH_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MathType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static MathType forNumber(int value) {
        switch (value) {
          case 0: return DEFAULT_MATH;
          case 1: return TENSOR_OP_MATH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MathType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MathType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MathType>() {
              public MathType findValueByNumber(int number) {
                return MathType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.AlgorithmProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final MathType[] VALUES = values();

      public static MathType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MathType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:stream_executor.dnn.AlgorithmProto.MathType)
    }

    public static final int ALGO_ID_FIELD_NUMBER = 1;
    private long algoId_ = 0L;
    /**
     * <code>int64 algo_id = 1;</code>
     * @return The algoId.
     */
    @java.lang.Override
    public long getAlgoId() {
      return algoId_;
    }

    public static final int MATH_TYPE_FIELD_NUMBER = 2;
    private int mathType_ = 0;
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     * @return The enum numeric value on the wire for mathType.
     */
    @java.lang.Override public int getMathTypeValue() {
      return mathType_;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     * @return The mathType.
     */
    @java.lang.Override public stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType() {
      stream_executor.dnn.Dnn.AlgorithmProto.MathType result = stream_executor.dnn.Dnn.AlgorithmProto.MathType.forNumber(mathType_);
      return result == null ? stream_executor.dnn.Dnn.AlgorithmProto.MathType.UNRECOGNIZED : result;
    }

    public static final int TUNING_KNOBS_FIELD_NUMBER = 4;
    private static final class TuningKnobsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.Long> tuningKnobs_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetTuningKnobs() {
      if (tuningKnobs_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TuningKnobsDefaultEntryHolder.defaultEntry);
      }
      return tuningKnobs_;
    }
    public int getTuningKnobsCount() {
      return internalGetTuningKnobs().getMap().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    @java.lang.Override
    public boolean containsTuningKnobs(
        long key) {
      
      return internalGetTuningKnobs().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTuningKnobsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getTuningKnobs() {
      return getTuningKnobsMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, java.lang.Long> getTuningKnobsMap() {
      return internalGetTuningKnobs().getMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    @java.lang.Override
    public long getTuningKnobsOrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetTuningKnobs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
     */
    @java.lang.Override
    public long getTuningKnobsOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetTuningKnobs().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int IS_CUDNN_FRONTEND_FIELD_NUMBER = 5;
    private boolean isCudnnFrontend_ = false;
    /**
     * <pre>
     * Legacy algorithm enums and cuDNN Frontend engine numbers need to coexist in
     * the same proto medium-term, until we can be confident of no longer needing
     * the legacy cuDNN convolution API.  Once the migration is complete, we can
     * stop producing legacy algorithm enums and remove this field.
     * </pre>
     *
     * <code>bool is_cudnn_frontend = 5;</code>
     * @return The isCudnnFrontend.
     */
    @java.lang.Override
    public boolean getIsCudnnFrontend() {
      return isCudnnFrontend_;
    }

    public static final int WORKSPACE_SIZE_FIELD_NUMBER = 6;
    private com.google.protobuf.UInt64Value workspaceSize_;
    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     * @return Whether the workspaceSize field is set.
     */
    @java.lang.Override
    public boolean hasWorkspaceSize() {
      return workspaceSize_ != null;
    }
    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     * @return The workspaceSize.
     */
    @java.lang.Override
    public com.google.protobuf.UInt64Value getWorkspaceSize() {
      return workspaceSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : workspaceSize_;
    }
    /**
     * <pre>
     * For ROCm only, it's impossible to re-query the required workspace size
     * after running the algorithm search, so we must store the workspace size
     * along with the choice of algorithm.  For consistency and convenience,
     * cuDNN uses this field in the same way, even though it would be possible to
     * re-query the workspace size from cuDNN at each use.
     * Since this message is persisted in files, we need to be able to distinguish
     * 0 workspace size from unknown workspace size in an old message, so this is
     * a message field.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt64ValueOrBuilder getWorkspaceSizeOrBuilder() {
      return workspaceSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : workspaceSize_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (algoId_ != 0L) {
        output.writeInt64(1, algoId_);
      }
      if (mathType_ != stream_executor.dnn.Dnn.AlgorithmProto.MathType.DEFAULT_MATH.getNumber()) {
        output.writeEnum(2, mathType_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeLongMapTo(
          output,
          internalGetTuningKnobs(),
          TuningKnobsDefaultEntryHolder.defaultEntry,
          4);
      if (isCudnnFrontend_ != false) {
        output.writeBool(5, isCudnnFrontend_);
      }
      if (workspaceSize_ != null) {
        output.writeMessage(6, getWorkspaceSize());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (algoId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, algoId_);
      }
      if (mathType_ != stream_executor.dnn.Dnn.AlgorithmProto.MathType.DEFAULT_MATH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, mathType_);
      }
      for (java.util.Map.Entry<java.lang.Long, java.lang.Long> entry
           : internalGetTuningKnobs().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
        tuningKnobs__ = TuningKnobsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, tuningKnobs__);
      }
      if (isCudnnFrontend_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isCudnnFrontend_);
      }
      if (workspaceSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getWorkspaceSize());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.AlgorithmProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.AlgorithmProto other = (stream_executor.dnn.Dnn.AlgorithmProto) obj;

      if (getAlgoId()
          != other.getAlgoId()) return false;
      if (mathType_ != other.mathType_) return false;
      if (!internalGetTuningKnobs().equals(
          other.internalGetTuningKnobs())) return false;
      if (getIsCudnnFrontend()
          != other.getIsCudnnFrontend()) return false;
      if (hasWorkspaceSize() != other.hasWorkspaceSize()) return false;
      if (hasWorkspaceSize()) {
        if (!getWorkspaceSize()
            .equals(other.getWorkspaceSize())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALGO_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAlgoId());
      hash = (37 * hash) + MATH_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + mathType_;
      if (!internalGetTuningKnobs().getMap().isEmpty()) {
        hash = (37 * hash) + TUNING_KNOBS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTuningKnobs().hashCode();
      }
      hash = (37 * hash) + IS_CUDNN_FRONTEND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsCudnnFrontend());
      if (hasWorkspaceSize()) {
        hash = (37 * hash) + WORKSPACE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getWorkspaceSize().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.AlgorithmProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Generic algorithm representation.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.AlgorithmProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.AlgorithmProto)
        stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetTuningKnobs();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableTuningKnobs();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.AlgorithmProto.class, stream_executor.dnn.Dnn.AlgorithmProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.AlgorithmProto.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        algoId_ = 0L;
        mathType_ = 0;
        internalGetMutableTuningKnobs().clear();
        isCudnnFrontend_ = false;
        workspaceSize_ = null;
        if (workspaceSizeBuilder_ != null) {
          workspaceSizeBuilder_.dispose();
          workspaceSizeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto build() {
        stream_executor.dnn.Dnn.AlgorithmProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto buildPartial() {
        stream_executor.dnn.Dnn.AlgorithmProto result = new stream_executor.dnn.Dnn.AlgorithmProto(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(stream_executor.dnn.Dnn.AlgorithmProto result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.algoId_ = algoId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.mathType_ = mathType_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.tuningKnobs_ = internalGetTuningKnobs();
          result.tuningKnobs_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.isCudnnFrontend_ = isCudnnFrontend_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.workspaceSize_ = workspaceSizeBuilder_ == null
              ? workspaceSize_
              : workspaceSizeBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.AlgorithmProto) {
          return mergeFrom((stream_executor.dnn.Dnn.AlgorithmProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.AlgorithmProto other) {
        if (other == stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance()) return this;
        if (other.getAlgoId() != 0L) {
          setAlgoId(other.getAlgoId());
        }
        if (other.mathType_ != 0) {
          setMathTypeValue(other.getMathTypeValue());
        }
        internalGetMutableTuningKnobs().mergeFrom(
            other.internalGetTuningKnobs());
        bitField0_ |= 0x00000004;
        if (other.getIsCudnnFrontend() != false) {
          setIsCudnnFrontend(other.getIsCudnnFrontend());
        }
        if (other.hasWorkspaceSize()) {
          mergeWorkspaceSize(other.getWorkspaceSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                algoId_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                mathType_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 34: {
                com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
                tuningKnobs__ = input.readMessage(
                    TuningKnobsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableTuningKnobs().getMutableMap().put(
                    tuningKnobs__.getKey(), tuningKnobs__.getValue());
                bitField0_ |= 0x00000004;
                break;
              } // case 34
              case 40: {
                isCudnnFrontend_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getWorkspaceSizeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long algoId_ ;
      /**
       * <code>int64 algo_id = 1;</code>
       * @return The algoId.
       */
      @java.lang.Override
      public long getAlgoId() {
        return algoId_;
      }
      /**
       * <code>int64 algo_id = 1;</code>
       * @param value The algoId to set.
       * @return This builder for chaining.
       */
      public Builder setAlgoId(long value) {
        
        algoId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int64 algo_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAlgoId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        algoId_ = 0L;
        onChanged();
        return this;
      }

      private int mathType_ = 0;
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       * @return The enum numeric value on the wire for mathType.
       */
      @java.lang.Override public int getMathTypeValue() {
        return mathType_;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       * @param value The enum numeric value on the wire for mathType to set.
       * @return This builder for chaining.
       */
      public Builder setMathTypeValue(int value) {
        mathType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       * @return The mathType.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType() {
        stream_executor.dnn.Dnn.AlgorithmProto.MathType result = stream_executor.dnn.Dnn.AlgorithmProto.MathType.forNumber(mathType_);
        return result == null ? stream_executor.dnn.Dnn.AlgorithmProto.MathType.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       * @param value The mathType to set.
       * @return This builder for chaining.
       */
      public Builder setMathType(stream_executor.dnn.Dnn.AlgorithmProto.MathType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        mathType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMathType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mathType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Long, java.lang.Long> tuningKnobs_;
      private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
          internalGetTuningKnobs() {
        if (tuningKnobs_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TuningKnobsDefaultEntryHolder.defaultEntry);
        }
        return tuningKnobs_;
      }
      private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
          internalGetMutableTuningKnobs() {
        if (tuningKnobs_ == null) {
          tuningKnobs_ = com.google.protobuf.MapField.newMapField(
              TuningKnobsDefaultEntryHolder.defaultEntry);
        }
        if (!tuningKnobs_.isMutable()) {
          tuningKnobs_ = tuningKnobs_.copy();
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return tuningKnobs_;
      }
      public int getTuningKnobsCount() {
        return internalGetTuningKnobs().getMap().size();
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      @java.lang.Override
      public boolean containsTuningKnobs(
          long key) {
        
        return internalGetTuningKnobs().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTuningKnobsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getTuningKnobs() {
        return getTuningKnobsMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getTuningKnobsMap() {
        return internalGetTuningKnobs().getMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      @java.lang.Override
      public long getTuningKnobsOrDefault(
          long key,
          long defaultValue) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            internalGetTuningKnobs().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      @java.lang.Override
      public long getTuningKnobsOrThrow(
          long key) {
        
        java.util.Map<java.lang.Long, java.lang.Long> map =
            internalGetTuningKnobs().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearTuningKnobs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        internalGetMutableTuningKnobs().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      public Builder removeTuningKnobs(
          long key) {
        
        internalGetMutableTuningKnobs().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long>
          getMutableTuningKnobs() {
        bitField0_ |= 0x00000004;
        return internalGetMutableTuningKnobs().getMutableMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      public Builder putTuningKnobs(
          long key,
          long value) {
        
        
        internalGetMutableTuningKnobs().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; tuning_knobs = 4;</code>
       */
      public Builder putAllTuningKnobs(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        internalGetMutableTuningKnobs().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000004;
        return this;
      }

      private boolean isCudnnFrontend_ ;
      /**
       * <pre>
       * Legacy algorithm enums and cuDNN Frontend engine numbers need to coexist in
       * the same proto medium-term, until we can be confident of no longer needing
       * the legacy cuDNN convolution API.  Once the migration is complete, we can
       * stop producing legacy algorithm enums and remove this field.
       * </pre>
       *
       * <code>bool is_cudnn_frontend = 5;</code>
       * @return The isCudnnFrontend.
       */
      @java.lang.Override
      public boolean getIsCudnnFrontend() {
        return isCudnnFrontend_;
      }
      /**
       * <pre>
       * Legacy algorithm enums and cuDNN Frontend engine numbers need to coexist in
       * the same proto medium-term, until we can be confident of no longer needing
       * the legacy cuDNN convolution API.  Once the migration is complete, we can
       * stop producing legacy algorithm enums and remove this field.
       * </pre>
       *
       * <code>bool is_cudnn_frontend = 5;</code>
       * @param value The isCudnnFrontend to set.
       * @return This builder for chaining.
       */
      public Builder setIsCudnnFrontend(boolean value) {
        
        isCudnnFrontend_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Legacy algorithm enums and cuDNN Frontend engine numbers need to coexist in
       * the same proto medium-term, until we can be confident of no longer needing
       * the legacy cuDNN convolution API.  Once the migration is complete, we can
       * stop producing legacy algorithm enums and remove this field.
       * </pre>
       *
       * <code>bool is_cudnn_frontend = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsCudnnFrontend() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isCudnnFrontend_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.UInt64Value workspaceSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> workspaceSizeBuilder_;
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       * @return Whether the workspaceSize field is set.
       */
      public boolean hasWorkspaceSize() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       * @return The workspaceSize.
       */
      public com.google.protobuf.UInt64Value getWorkspaceSize() {
        if (workspaceSizeBuilder_ == null) {
          return workspaceSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : workspaceSize_;
        } else {
          return workspaceSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public Builder setWorkspaceSize(com.google.protobuf.UInt64Value value) {
        if (workspaceSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          workspaceSize_ = value;
        } else {
          workspaceSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public Builder setWorkspaceSize(
          com.google.protobuf.UInt64Value.Builder builderForValue) {
        if (workspaceSizeBuilder_ == null) {
          workspaceSize_ = builderForValue.build();
        } else {
          workspaceSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public Builder mergeWorkspaceSize(com.google.protobuf.UInt64Value value) {
        if (workspaceSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            workspaceSize_ != null &&
            workspaceSize_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
            getWorkspaceSizeBuilder().mergeFrom(value);
          } else {
            workspaceSize_ = value;
          }
        } else {
          workspaceSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public Builder clearWorkspaceSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        workspaceSize_ = null;
        if (workspaceSizeBuilder_ != null) {
          workspaceSizeBuilder_.dispose();
          workspaceSizeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public com.google.protobuf.UInt64Value.Builder getWorkspaceSizeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getWorkspaceSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      public com.google.protobuf.UInt64ValueOrBuilder getWorkspaceSizeOrBuilder() {
        if (workspaceSizeBuilder_ != null) {
          return workspaceSizeBuilder_.getMessageOrBuilder();
        } else {
          return workspaceSize_ == null ?
              com.google.protobuf.UInt64Value.getDefaultInstance() : workspaceSize_;
        }
      }
      /**
       * <pre>
       * For ROCm only, it's impossible to re-query the required workspace size
       * after running the algorithm search, so we must store the workspace size
       * along with the choice of algorithm.  For consistency and convenience,
       * cuDNN uses this field in the same way, even though it would be possible to
       * re-query the workspace size from cuDNN at each use.
       * Since this message is persisted in files, we need to be able to distinguish
       * 0 workspace size from unknown workspace size in an old message, so this is
       * a message field.
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value workspace_size = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
          getWorkspaceSizeFieldBuilder() {
        if (workspaceSizeBuilder_ == null) {
          workspaceSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                  getWorkspaceSize(),
                  getParentForChildren(),
                  isClean());
          workspaceSize_ = null;
        }
        return workspaceSizeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.AlgorithmProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.AlgorithmProto)
    private static final stream_executor.dnn.Dnn.AlgorithmProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.AlgorithmProto();
    }

    public static stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AlgorithmProto>
        PARSER = new com.google.protobuf.AbstractParser<AlgorithmProto>() {
      @java.lang.Override
      public AlgorithmProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AlgorithmProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AlgorithmProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AlgorithmConfigProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.AlgorithmConfigProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     * @return Whether the algorithm field is set.
     */
    boolean hasAlgorithm();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     * @return The algorithm.
     */
    stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     */
    stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder();

    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     * @return Whether the algorithmNoScratch field is set.
     */
    boolean hasAlgorithmNoScratch();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     * @return The algorithmNoScratch.
     */
    stream_executor.dnn.Dnn.AlgorithmProto getAlgorithmNoScratch();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     */
    stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmNoScratchOrBuilder();

    /**
     * <code>int64 scratch_size = 3;</code>
     * @return Whether the scratchSize field is set.
     */
    boolean hasScratchSize();
    /**
     * <code>int64 scratch_size = 3;</code>
     * @return The scratchSize.
     */
    long getScratchSize();

    public stream_executor.dnn.Dnn.AlgorithmConfigProto.OptionalAlgorithmCase getOptionalAlgorithmCase();

    public stream_executor.dnn.Dnn.AlgorithmConfigProto.OptionalAlgorithmNoScratchCase getOptionalAlgorithmNoScratchCase();

    public stream_executor.dnn.Dnn.AlgorithmConfigProto.OptionalScratchSizeCase getOptionalScratchSizeCase();
  }
  /**
   * <pre>
   * Proto definition of AlgorithmConfig in "dnn.h".
   * TODO(ruochengw): After cl/380702564 is submitted, add support for algorithm
   * configs with cuDNN Frontend APIs.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.AlgorithmConfigProto}
   */
  public static final class AlgorithmConfigProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.AlgorithmConfigProto)
      AlgorithmConfigProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AlgorithmConfigProto.newBuilder() to construct.
    private AlgorithmConfigProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AlgorithmConfigProto() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AlgorithmConfigProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmConfigProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.AlgorithmConfigProto.class, stream_executor.dnn.Dnn.AlgorithmConfigProto.Builder.class);
    }

    private int optionalAlgorithmCase_ = 0;
    private java.lang.Object optionalAlgorithm_;
    public enum OptionalAlgorithmCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ALGORITHM(1),
      OPTIONALALGORITHM_NOT_SET(0);
      private final int value;
      private OptionalAlgorithmCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OptionalAlgorithmCase valueOf(int value) {
        return forNumber(value);
      }

      public static OptionalAlgorithmCase forNumber(int value) {
        switch (value) {
          case 1: return ALGORITHM;
          case 0: return OPTIONALALGORITHM_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OptionalAlgorithmCase
    getOptionalAlgorithmCase() {
      return OptionalAlgorithmCase.forNumber(
          optionalAlgorithmCase_);
    }

    private int optionalAlgorithmNoScratchCase_ = 0;
    private java.lang.Object optionalAlgorithmNoScratch_;
    public enum OptionalAlgorithmNoScratchCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ALGORITHM_NO_SCRATCH(2),
      OPTIONALALGORITHMNOSCRATCH_NOT_SET(0);
      private final int value;
      private OptionalAlgorithmNoScratchCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OptionalAlgorithmNoScratchCase valueOf(int value) {
        return forNumber(value);
      }

      public static OptionalAlgorithmNoScratchCase forNumber(int value) {
        switch (value) {
          case 2: return ALGORITHM_NO_SCRATCH;
          case 0: return OPTIONALALGORITHMNOSCRATCH_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OptionalAlgorithmNoScratchCase
    getOptionalAlgorithmNoScratchCase() {
      return OptionalAlgorithmNoScratchCase.forNumber(
          optionalAlgorithmNoScratchCase_);
    }

    private int optionalScratchSizeCase_ = 0;
    private java.lang.Object optionalScratchSize_;
    public enum OptionalScratchSizeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SCRATCH_SIZE(3),
      OPTIONALSCRATCHSIZE_NOT_SET(0);
      private final int value;
      private OptionalScratchSizeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OptionalScratchSizeCase valueOf(int value) {
        return forNumber(value);
      }

      public static OptionalScratchSizeCase forNumber(int value) {
        switch (value) {
          case 3: return SCRATCH_SIZE;
          case 0: return OPTIONALSCRATCHSIZE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OptionalScratchSizeCase
    getOptionalScratchSizeCase() {
      return OptionalScratchSizeCase.forNumber(
          optionalScratchSizeCase_);
    }

    public static final int ALGORITHM_FIELD_NUMBER = 1;
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     * @return Whether the algorithm field is set.
     */
    @java.lang.Override
    public boolean hasAlgorithm() {
      return optionalAlgorithmCase_ == 1;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     * @return The algorithm.
     */
    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm() {
      if (optionalAlgorithmCase_ == 1) {
         return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_;
      }
      return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
     */
    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder() {
      if (optionalAlgorithmCase_ == 1) {
         return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_;
      }
      return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
    }

    public static final int ALGORITHM_NO_SCRATCH_FIELD_NUMBER = 2;
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     * @return Whether the algorithmNoScratch field is set.
     */
    @java.lang.Override
    public boolean hasAlgorithmNoScratch() {
      return optionalAlgorithmNoScratchCase_ == 2;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     * @return The algorithmNoScratch.
     */
    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithmNoScratch() {
      if (optionalAlgorithmNoScratchCase_ == 2) {
         return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_;
      }
      return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
     */
    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmNoScratchOrBuilder() {
      if (optionalAlgorithmNoScratchCase_ == 2) {
         return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_;
      }
      return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
    }

    public static final int SCRATCH_SIZE_FIELD_NUMBER = 3;
    /**
     * <code>int64 scratch_size = 3;</code>
     * @return Whether the scratchSize field is set.
     */
    @java.lang.Override
    public boolean hasScratchSize() {
      return optionalScratchSizeCase_ == 3;
    }
    /**
     * <code>int64 scratch_size = 3;</code>
     * @return The scratchSize.
     */
    @java.lang.Override
    public long getScratchSize() {
      if (optionalScratchSizeCase_ == 3) {
        return (java.lang.Long) optionalScratchSize_;
      }
      return 0L;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (optionalAlgorithmCase_ == 1) {
        output.writeMessage(1, (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_);
      }
      if (optionalAlgorithmNoScratchCase_ == 2) {
        output.writeMessage(2, (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_);
      }
      if (optionalScratchSizeCase_ == 3) {
        output.writeInt64(
            3, (long)((java.lang.Long) optionalScratchSize_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (optionalAlgorithmCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_);
      }
      if (optionalAlgorithmNoScratchCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_);
      }
      if (optionalScratchSizeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              3, (long)((java.lang.Long) optionalScratchSize_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.AlgorithmConfigProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.AlgorithmConfigProto other = (stream_executor.dnn.Dnn.AlgorithmConfigProto) obj;

      if (!getOptionalAlgorithmCase().equals(other.getOptionalAlgorithmCase())) return false;
      switch (optionalAlgorithmCase_) {
        case 1:
          if (!getAlgorithm()
              .equals(other.getAlgorithm())) return false;
          break;
        case 0:
        default:
      }
      if (!getOptionalAlgorithmNoScratchCase().equals(other.getOptionalAlgorithmNoScratchCase())) return false;
      switch (optionalAlgorithmNoScratchCase_) {
        case 2:
          if (!getAlgorithmNoScratch()
              .equals(other.getAlgorithmNoScratch())) return false;
          break;
        case 0:
        default:
      }
      if (!getOptionalScratchSizeCase().equals(other.getOptionalScratchSizeCase())) return false;
      switch (optionalScratchSizeCase_) {
        case 3:
          if (getScratchSize()
              != other.getScratchSize()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (optionalAlgorithmCase_) {
        case 1:
          hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
          hash = (53 * hash) + getAlgorithm().hashCode();
          break;
        case 0:
        default:
      }
      switch (optionalAlgorithmNoScratchCase_) {
        case 2:
          hash = (37 * hash) + ALGORITHM_NO_SCRATCH_FIELD_NUMBER;
          hash = (53 * hash) + getAlgorithmNoScratch().hashCode();
          break;
        case 0:
        default:
      }
      switch (optionalScratchSizeCase_) {
        case 3:
          hash = (37 * hash) + SCRATCH_SIZE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getScratchSize());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmConfigProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.AlgorithmConfigProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Proto definition of AlgorithmConfig in "dnn.h".
     * TODO(ruochengw): After cl/380702564 is submitted, add support for algorithm
     * configs with cuDNN Frontend APIs.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.AlgorithmConfigProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.AlgorithmConfigProto)
        stream_executor.dnn.Dnn.AlgorithmConfigProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmConfigProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.AlgorithmConfigProto.class, stream_executor.dnn.Dnn.AlgorithmConfigProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.AlgorithmConfigProto.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (algorithmBuilder_ != null) {
          algorithmBuilder_.clear();
        }
        if (algorithmNoScratchBuilder_ != null) {
          algorithmNoScratchBuilder_.clear();
        }
        optionalAlgorithmCase_ = 0;
        optionalAlgorithm_ = null;
        optionalAlgorithmNoScratchCase_ = 0;
        optionalAlgorithmNoScratch_ = null;
        optionalScratchSizeCase_ = 0;
        optionalScratchSize_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmConfigProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.AlgorithmConfigProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmConfigProto build() {
        stream_executor.dnn.Dnn.AlgorithmConfigProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmConfigProto buildPartial() {
        stream_executor.dnn.Dnn.AlgorithmConfigProto result = new stream_executor.dnn.Dnn.AlgorithmConfigProto(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(stream_executor.dnn.Dnn.AlgorithmConfigProto result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(stream_executor.dnn.Dnn.AlgorithmConfigProto result) {
        result.optionalAlgorithmCase_ = optionalAlgorithmCase_;
        result.optionalAlgorithm_ = this.optionalAlgorithm_;
        if (optionalAlgorithmCase_ == 1 &&
            algorithmBuilder_ != null) {
          result.optionalAlgorithm_ = algorithmBuilder_.build();
        }
        result.optionalAlgorithmNoScratchCase_ = optionalAlgorithmNoScratchCase_;
        result.optionalAlgorithmNoScratch_ = this.optionalAlgorithmNoScratch_;
        if (optionalAlgorithmNoScratchCase_ == 2 &&
            algorithmNoScratchBuilder_ != null) {
          result.optionalAlgorithmNoScratch_ = algorithmNoScratchBuilder_.build();
        }
        result.optionalScratchSizeCase_ = optionalScratchSizeCase_;
        result.optionalScratchSize_ = this.optionalScratchSize_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.AlgorithmConfigProto) {
          return mergeFrom((stream_executor.dnn.Dnn.AlgorithmConfigProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.AlgorithmConfigProto other) {
        if (other == stream_executor.dnn.Dnn.AlgorithmConfigProto.getDefaultInstance()) return this;
        switch (other.getOptionalAlgorithmCase()) {
          case ALGORITHM: {
            mergeAlgorithm(other.getAlgorithm());
            break;
          }
          case OPTIONALALGORITHM_NOT_SET: {
            break;
          }
        }
        switch (other.getOptionalAlgorithmNoScratchCase()) {
          case ALGORITHM_NO_SCRATCH: {
            mergeAlgorithmNoScratch(other.getAlgorithmNoScratch());
            break;
          }
          case OPTIONALALGORITHMNOSCRATCH_NOT_SET: {
            break;
          }
        }
        switch (other.getOptionalScratchSizeCase()) {
          case SCRATCH_SIZE: {
            setScratchSize(other.getScratchSize());
            break;
          }
          case OPTIONALSCRATCHSIZE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getAlgorithmFieldBuilder().getBuilder(),
                    extensionRegistry);
                optionalAlgorithmCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getAlgorithmNoScratchFieldBuilder().getBuilder(),
                    extensionRegistry);
                optionalAlgorithmNoScratchCase_ = 2;
                break;
              } // case 18
              case 24: {
                optionalScratchSize_ = input.readInt64();
                optionalScratchSizeCase_ = 3;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int optionalAlgorithmCase_ = 0;
      private java.lang.Object optionalAlgorithm_;
      public OptionalAlgorithmCase
          getOptionalAlgorithmCase() {
        return OptionalAlgorithmCase.forNumber(
            optionalAlgorithmCase_);
      }

      public Builder clearOptionalAlgorithm() {
        optionalAlgorithmCase_ = 0;
        optionalAlgorithm_ = null;
        onChanged();
        return this;
      }

      private int optionalAlgorithmNoScratchCase_ = 0;
      private java.lang.Object optionalAlgorithmNoScratch_;
      public OptionalAlgorithmNoScratchCase
          getOptionalAlgorithmNoScratchCase() {
        return OptionalAlgorithmNoScratchCase.forNumber(
            optionalAlgorithmNoScratchCase_);
      }

      public Builder clearOptionalAlgorithmNoScratch() {
        optionalAlgorithmNoScratchCase_ = 0;
        optionalAlgorithmNoScratch_ = null;
        onChanged();
        return this;
      }

      private int optionalScratchSizeCase_ = 0;
      private java.lang.Object optionalScratchSize_;
      public OptionalScratchSizeCase
          getOptionalScratchSizeCase() {
        return OptionalScratchSizeCase.forNumber(
            optionalScratchSizeCase_);
      }

      public Builder clearOptionalScratchSize() {
        optionalScratchSizeCase_ = 0;
        optionalScratchSize_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> algorithmBuilder_;
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       * @return Whether the algorithm field is set.
       */
      @java.lang.Override
      public boolean hasAlgorithm() {
        return optionalAlgorithmCase_ == 1;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       * @return The algorithm.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm() {
        if (algorithmBuilder_ == null) {
          if (optionalAlgorithmCase_ == 1) {
            return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_;
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        } else {
          if (optionalAlgorithmCase_ == 1) {
            return algorithmBuilder_.getMessage();
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      public Builder setAlgorithm(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optionalAlgorithm_ = value;
          onChanged();
        } else {
          algorithmBuilder_.setMessage(value);
        }
        optionalAlgorithmCase_ = 1;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      public Builder setAlgorithm(
          stream_executor.dnn.Dnn.AlgorithmProto.Builder builderForValue) {
        if (algorithmBuilder_ == null) {
          optionalAlgorithm_ = builderForValue.build();
          onChanged();
        } else {
          algorithmBuilder_.setMessage(builderForValue.build());
        }
        optionalAlgorithmCase_ = 1;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      public Builder mergeAlgorithm(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmBuilder_ == null) {
          if (optionalAlgorithmCase_ == 1 &&
              optionalAlgorithm_ != stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance()) {
            optionalAlgorithm_ = stream_executor.dnn.Dnn.AlgorithmProto.newBuilder((stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_)
                .mergeFrom(value).buildPartial();
          } else {
            optionalAlgorithm_ = value;
          }
          onChanged();
        } else {
          if (optionalAlgorithmCase_ == 1) {
            algorithmBuilder_.mergeFrom(value);
          } else {
            algorithmBuilder_.setMessage(value);
          }
        }
        optionalAlgorithmCase_ = 1;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      public Builder clearAlgorithm() {
        if (algorithmBuilder_ == null) {
          if (optionalAlgorithmCase_ == 1) {
            optionalAlgorithmCase_ = 0;
            optionalAlgorithm_ = null;
            onChanged();
          }
        } else {
          if (optionalAlgorithmCase_ == 1) {
            optionalAlgorithmCase_ = 0;
            optionalAlgorithm_ = null;
          }
          algorithmBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProto.Builder getAlgorithmBuilder() {
        return getAlgorithmFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder() {
        if ((optionalAlgorithmCase_ == 1) && (algorithmBuilder_ != null)) {
          return algorithmBuilder_.getMessageOrBuilder();
        } else {
          if (optionalAlgorithmCase_ == 1) {
            return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_;
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> 
          getAlgorithmFieldBuilder() {
        if (algorithmBuilder_ == null) {
          if (!(optionalAlgorithmCase_ == 1)) {
            optionalAlgorithm_ = stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
          }
          algorithmBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder>(
                  (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithm_,
                  getParentForChildren(),
                  isClean());
          optionalAlgorithm_ = null;
        }
        optionalAlgorithmCase_ = 1;
        onChanged();
        return algorithmBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> algorithmNoScratchBuilder_;
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       * @return Whether the algorithmNoScratch field is set.
       */
      @java.lang.Override
      public boolean hasAlgorithmNoScratch() {
        return optionalAlgorithmNoScratchCase_ == 2;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       * @return The algorithmNoScratch.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithmNoScratch() {
        if (algorithmNoScratchBuilder_ == null) {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_;
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        } else {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            return algorithmNoScratchBuilder_.getMessage();
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      public Builder setAlgorithmNoScratch(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmNoScratchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optionalAlgorithmNoScratch_ = value;
          onChanged();
        } else {
          algorithmNoScratchBuilder_.setMessage(value);
        }
        optionalAlgorithmNoScratchCase_ = 2;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      public Builder setAlgorithmNoScratch(
          stream_executor.dnn.Dnn.AlgorithmProto.Builder builderForValue) {
        if (algorithmNoScratchBuilder_ == null) {
          optionalAlgorithmNoScratch_ = builderForValue.build();
          onChanged();
        } else {
          algorithmNoScratchBuilder_.setMessage(builderForValue.build());
        }
        optionalAlgorithmNoScratchCase_ = 2;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      public Builder mergeAlgorithmNoScratch(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmNoScratchBuilder_ == null) {
          if (optionalAlgorithmNoScratchCase_ == 2 &&
              optionalAlgorithmNoScratch_ != stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance()) {
            optionalAlgorithmNoScratch_ = stream_executor.dnn.Dnn.AlgorithmProto.newBuilder((stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_)
                .mergeFrom(value).buildPartial();
          } else {
            optionalAlgorithmNoScratch_ = value;
          }
          onChanged();
        } else {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            algorithmNoScratchBuilder_.mergeFrom(value);
          } else {
            algorithmNoScratchBuilder_.setMessage(value);
          }
        }
        optionalAlgorithmNoScratchCase_ = 2;
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      public Builder clearAlgorithmNoScratch() {
        if (algorithmNoScratchBuilder_ == null) {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            optionalAlgorithmNoScratchCase_ = 0;
            optionalAlgorithmNoScratch_ = null;
            onChanged();
          }
        } else {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            optionalAlgorithmNoScratchCase_ = 0;
            optionalAlgorithmNoScratch_ = null;
          }
          algorithmNoScratchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProto.Builder getAlgorithmNoScratchBuilder() {
        return getAlgorithmNoScratchFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmNoScratchOrBuilder() {
        if ((optionalAlgorithmNoScratchCase_ == 2) && (algorithmNoScratchBuilder_ != null)) {
          return algorithmNoScratchBuilder_.getMessageOrBuilder();
        } else {
          if (optionalAlgorithmNoScratchCase_ == 2) {
            return (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_;
          }
          return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> 
          getAlgorithmNoScratchFieldBuilder() {
        if (algorithmNoScratchBuilder_ == null) {
          if (!(optionalAlgorithmNoScratchCase_ == 2)) {
            optionalAlgorithmNoScratch_ = stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
          }
          algorithmNoScratchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder>(
                  (stream_executor.dnn.Dnn.AlgorithmProto) optionalAlgorithmNoScratch_,
                  getParentForChildren(),
                  isClean());
          optionalAlgorithmNoScratch_ = null;
        }
        optionalAlgorithmNoScratchCase_ = 2;
        onChanged();
        return algorithmNoScratchBuilder_;
      }

      /**
       * <code>int64 scratch_size = 3;</code>
       * @return Whether the scratchSize field is set.
       */
      public boolean hasScratchSize() {
        return optionalScratchSizeCase_ == 3;
      }
      /**
       * <code>int64 scratch_size = 3;</code>
       * @return The scratchSize.
       */
      public long getScratchSize() {
        if (optionalScratchSizeCase_ == 3) {
          return (java.lang.Long) optionalScratchSize_;
        }
        return 0L;
      }
      /**
       * <code>int64 scratch_size = 3;</code>
       * @param value The scratchSize to set.
       * @return This builder for chaining.
       */
      public Builder setScratchSize(long value) {
        
        optionalScratchSizeCase_ = 3;
        optionalScratchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 scratch_size = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearScratchSize() {
        if (optionalScratchSizeCase_ == 3) {
          optionalScratchSizeCase_ = 0;
          optionalScratchSize_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.AlgorithmConfigProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.AlgorithmConfigProto)
    private static final stream_executor.dnn.Dnn.AlgorithmConfigProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.AlgorithmConfigProto();
    }

    public static stream_executor.dnn.Dnn.AlgorithmConfigProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AlgorithmConfigProto>
        PARSER = new com.google.protobuf.AbstractParser<AlgorithmConfigProto>() {
      @java.lang.Override
      public AlgorithmConfigProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AlgorithmConfigProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AlgorithmConfigProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmConfigProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConvolutionDescriptorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.ConvolutionDescriptorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 paddings = 1;</code>
     * @return A list containing the paddings.
     */
    java.util.List<java.lang.Long> getPaddingsList();
    /**
     * <code>repeated int64 paddings = 1;</code>
     * @return The count of paddings.
     */
    int getPaddingsCount();
    /**
     * <code>repeated int64 paddings = 1;</code>
     * @param index The index of the element to return.
     * @return The paddings at the given index.
     */
    long getPaddings(int index);

    /**
     * <code>repeated int64 strides = 2;</code>
     * @return A list containing the strides.
     */
    java.util.List<java.lang.Long> getStridesList();
    /**
     * <code>repeated int64 strides = 2;</code>
     * @return The count of strides.
     */
    int getStridesCount();
    /**
     * <code>repeated int64 strides = 2;</code>
     * @param index The index of the element to return.
     * @return The strides at the given index.
     */
    long getStrides(int index);

    /**
     * <code>repeated int64 dilations = 3;</code>
     * @return A list containing the dilations.
     */
    java.util.List<java.lang.Long> getDilationsList();
    /**
     * <code>repeated int64 dilations = 3;</code>
     * @return The count of dilations.
     */
    int getDilationsCount();
    /**
     * <code>repeated int64 dilations = 3;</code>
     * @param index The index of the element to return.
     * @return The dilations at the given index.
     */
    long getDilations(int index);

    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     * @return The enum numeric value on the wire for computeMode.
     */
    int getComputeModeValue();
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     * @return The computeMode.
     */
    stream_executor.dnn.Dnn.DataType getComputeMode();

    /**
     * <pre>
     * See cuDNN's group count.
     * </pre>
     *
     * <code>int32 group_count = 5;</code>
     * @return The groupCount.
     */
    int getGroupCount();

    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     * @return The enum numeric value on the wire for convolutionMode.
     */
    int getConvolutionModeValue();
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     * @return The convolutionMode.
     */
    stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode();

    /**
     * <pre>
     * Tensorflow node name, same as in NodeDef, for debugging purposes.
     * </pre>
     *
     * <code>string name = 7;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Tensorflow node name, same as in NodeDef, for debugging purposes.
     * </pre>
     *
     * <code>string name = 7;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * Convolution-specific parameters.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.ConvolutionDescriptorProto}
   */
  public static final class ConvolutionDescriptorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.ConvolutionDescriptorProto)
      ConvolutionDescriptorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConvolutionDescriptorProto.newBuilder() to construct.
    private ConvolutionDescriptorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConvolutionDescriptorProto() {
      paddings_ = emptyLongList();
      strides_ = emptyLongList();
      dilations_ = emptyLongList();
      computeMode_ = 0;
      convolutionMode_ = 0;
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConvolutionDescriptorProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto.class, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder.class);
    }

    public static final int PADDINGS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList paddings_;
    /**
     * <code>repeated int64 paddings = 1;</code>
     * @return A list containing the paddings.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getPaddingsList() {
      return paddings_;
    }
    /**
     * <code>repeated int64 paddings = 1;</code>
     * @return The count of paddings.
     */
    public int getPaddingsCount() {
      return paddings_.size();
    }
    /**
     * <code>repeated int64 paddings = 1;</code>
     * @param index The index of the element to return.
     * @return The paddings at the given index.
     */
    public long getPaddings(int index) {
      return paddings_.getLong(index);
    }
    private int paddingsMemoizedSerializedSize = -1;

    public static final int STRIDES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList strides_;
    /**
     * <code>repeated int64 strides = 2;</code>
     * @return A list containing the strides.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getStridesList() {
      return strides_;
    }
    /**
     * <code>repeated int64 strides = 2;</code>
     * @return The count of strides.
     */
    public int getStridesCount() {
      return strides_.size();
    }
    /**
     * <code>repeated int64 strides = 2;</code>
     * @param index The index of the element to return.
     * @return The strides at the given index.
     */
    public long getStrides(int index) {
      return strides_.getLong(index);
    }
    private int stridesMemoizedSerializedSize = -1;

    public static final int DILATIONS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList dilations_;
    /**
     * <code>repeated int64 dilations = 3;</code>
     * @return A list containing the dilations.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getDilationsList() {
      return dilations_;
    }
    /**
     * <code>repeated int64 dilations = 3;</code>
     * @return The count of dilations.
     */
    public int getDilationsCount() {
      return dilations_.size();
    }
    /**
     * <code>repeated int64 dilations = 3;</code>
     * @param index The index of the element to return.
     * @return The dilations at the given index.
     */
    public long getDilations(int index) {
      return dilations_.getLong(index);
    }
    private int dilationsMemoizedSerializedSize = -1;

    public static final int COMPUTE_MODE_FIELD_NUMBER = 4;
    private int computeMode_ = 0;
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     * @return The enum numeric value on the wire for computeMode.
     */
    @java.lang.Override public int getComputeModeValue() {
      return computeMode_;
    }
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     * @return The computeMode.
     */
    @java.lang.Override public stream_executor.dnn.Dnn.DataType getComputeMode() {
      stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.forNumber(computeMode_);
      return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
    }

    public static final int GROUP_COUNT_FIELD_NUMBER = 5;
    private int groupCount_ = 0;
    /**
     * <pre>
     * See cuDNN's group count.
     * </pre>
     *
     * <code>int32 group_count = 5;</code>
     * @return The groupCount.
     */
    @java.lang.Override
    public int getGroupCount() {
      return groupCount_;
    }

    public static final int CONVOLUTION_MODE_FIELD_NUMBER = 6;
    private int convolutionMode_ = 0;
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     * @return The enum numeric value on the wire for convolutionMode.
     */
    @java.lang.Override public int getConvolutionModeValue() {
      return convolutionMode_;
    }
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     * @return The convolutionMode.
     */
    @java.lang.Override public stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode() {
      stream_executor.dnn.Dnn.ConvolutionMode result = stream_executor.dnn.Dnn.ConvolutionMode.forNumber(convolutionMode_);
      return result == null ? stream_executor.dnn.Dnn.ConvolutionMode.UNRECOGNIZED : result;
    }

    public static final int NAME_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Tensorflow node name, same as in NodeDef, for debugging purposes.
     * </pre>
     *
     * <code>string name = 7;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Tensorflow node name, same as in NodeDef, for debugging purposes.
     * </pre>
     *
     * <code>string name = 7;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getPaddingsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(paddingsMemoizedSerializedSize);
      }
      for (int i = 0; i < paddings_.size(); i++) {
        output.writeInt64NoTag(paddings_.getLong(i));
      }
      if (getStridesList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(stridesMemoizedSerializedSize);
      }
      for (int i = 0; i < strides_.size(); i++) {
        output.writeInt64NoTag(strides_.getLong(i));
      }
      if (getDilationsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(dilationsMemoizedSerializedSize);
      }
      for (int i = 0; i < dilations_.size(); i++) {
        output.writeInt64NoTag(dilations_.getLong(i));
      }
      if (computeMode_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        output.writeEnum(4, computeMode_);
      }
      if (groupCount_ != 0) {
        output.writeInt32(5, groupCount_);
      }
      if (convolutionMode_ != stream_executor.dnn.Dnn.ConvolutionMode.CROSS_CORRELATION.getNumber()) {
        output.writeEnum(6, convolutionMode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, name_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < paddings_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(paddings_.getLong(i));
        }
        size += dataSize;
        if (!getPaddingsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        paddingsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strides_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(strides_.getLong(i));
        }
        size += dataSize;
        if (!getStridesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        stridesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dilations_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dilations_.getLong(i));
        }
        size += dataSize;
        if (!getDilationsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dilationsMemoizedSerializedSize = dataSize;
      }
      if (computeMode_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, computeMode_);
      }
      if (groupCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, groupCount_);
      }
      if (convolutionMode_ != stream_executor.dnn.Dnn.ConvolutionMode.CROSS_CORRELATION.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, convolutionMode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, name_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.ConvolutionDescriptorProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.ConvolutionDescriptorProto other = (stream_executor.dnn.Dnn.ConvolutionDescriptorProto) obj;

      if (!getPaddingsList()
          .equals(other.getPaddingsList())) return false;
      if (!getStridesList()
          .equals(other.getStridesList())) return false;
      if (!getDilationsList()
          .equals(other.getDilationsList())) return false;
      if (computeMode_ != other.computeMode_) return false;
      if (getGroupCount()
          != other.getGroupCount()) return false;
      if (convolutionMode_ != other.convolutionMode_) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPaddingsCount() > 0) {
        hash = (37 * hash) + PADDINGS_FIELD_NUMBER;
        hash = (53 * hash) + getPaddingsList().hashCode();
      }
      if (getStridesCount() > 0) {
        hash = (37 * hash) + STRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getStridesList().hashCode();
      }
      if (getDilationsCount() > 0) {
        hash = (37 * hash) + DILATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDilationsList().hashCode();
      }
      hash = (37 * hash) + COMPUTE_MODE_FIELD_NUMBER;
      hash = (53 * hash) + computeMode_;
      hash = (37 * hash) + GROUP_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGroupCount();
      hash = (37 * hash) + CONVOLUTION_MODE_FIELD_NUMBER;
      hash = (53 * hash) + convolutionMode_;
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.ConvolutionDescriptorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Convolution-specific parameters.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.ConvolutionDescriptorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.ConvolutionDescriptorProto)
        stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.ConvolutionDescriptorProto.class, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.ConvolutionDescriptorProto.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        paddings_ = emptyLongList();
        strides_ = emptyLongList();
        dilations_ = emptyLongList();
        computeMode_ = 0;
        groupCount_ = 0;
        convolutionMode_ = 0;
        name_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto build() {
        stream_executor.dnn.Dnn.ConvolutionDescriptorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto buildPartial() {
        stream_executor.dnn.Dnn.ConvolutionDescriptorProto result = new stream_executor.dnn.Dnn.ConvolutionDescriptorProto(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(stream_executor.dnn.Dnn.ConvolutionDescriptorProto result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          paddings_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.paddings_ = paddings_;
        if (((bitField0_ & 0x00000002) != 0)) {
          strides_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.strides_ = strides_;
        if (((bitField0_ & 0x00000004) != 0)) {
          dilations_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.dilations_ = dilations_;
      }

      private void buildPartial0(stream_executor.dnn.Dnn.ConvolutionDescriptorProto result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.computeMode_ = computeMode_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.groupCount_ = groupCount_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.convolutionMode_ = convolutionMode_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.name_ = name_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.ConvolutionDescriptorProto) {
          return mergeFrom((stream_executor.dnn.Dnn.ConvolutionDescriptorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.ConvolutionDescriptorProto other) {
        if (other == stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance()) return this;
        if (!other.paddings_.isEmpty()) {
          if (paddings_.isEmpty()) {
            paddings_ = other.paddings_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePaddingsIsMutable();
            paddings_.addAll(other.paddings_);
          }
          onChanged();
        }
        if (!other.strides_.isEmpty()) {
          if (strides_.isEmpty()) {
            strides_ = other.strides_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureStridesIsMutable();
            strides_.addAll(other.strides_);
          }
          onChanged();
        }
        if (!other.dilations_.isEmpty()) {
          if (dilations_.isEmpty()) {
            dilations_ = other.dilations_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDilationsIsMutable();
            dilations_.addAll(other.dilations_);
          }
          onChanged();
        }
        if (other.computeMode_ != 0) {
          setComputeModeValue(other.getComputeModeValue());
        }
        if (other.getGroupCount() != 0) {
          setGroupCount(other.getGroupCount());
        }
        if (other.convolutionMode_ != 0) {
          setConvolutionModeValue(other.getConvolutionModeValue());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                long v = input.readInt64();
                ensurePaddingsIsMutable();
                paddings_.addLong(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePaddingsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  paddings_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 16: {
                long v = input.readInt64();
                ensureStridesIsMutable();
                strides_.addLong(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureStridesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  strides_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 24: {
                long v = input.readInt64();
                ensureDilationsIsMutable();
                dilations_.addLong(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDilationsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  dilations_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 32: {
                computeMode_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                groupCount_ = input.readInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                convolutionMode_ = input.readEnum();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 58: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.LongList paddings_ = emptyLongList();
      private void ensurePaddingsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          paddings_ = mutableCopy(paddings_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @return A list containing the paddings.
       */
      public java.util.List<java.lang.Long>
          getPaddingsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(paddings_) : paddings_;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @return The count of paddings.
       */
      public int getPaddingsCount() {
        return paddings_.size();
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @param index The index of the element to return.
       * @return The paddings at the given index.
       */
      public long getPaddings(int index) {
        return paddings_.getLong(index);
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @param index The index to set the value at.
       * @param value The paddings to set.
       * @return This builder for chaining.
       */
      public Builder setPaddings(
          int index, long value) {
        
        ensurePaddingsIsMutable();
        paddings_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @param value The paddings to add.
       * @return This builder for chaining.
       */
      public Builder addPaddings(long value) {
        
        ensurePaddingsIsMutable();
        paddings_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @param values The paddings to add.
       * @return This builder for chaining.
       */
      public Builder addAllPaddings(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePaddingsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, paddings_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPaddings() {
        paddings_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList strides_ = emptyLongList();
      private void ensureStridesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          strides_ = mutableCopy(strides_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @return A list containing the strides.
       */
      public java.util.List<java.lang.Long>
          getStridesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(strides_) : strides_;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @return The count of strides.
       */
      public int getStridesCount() {
        return strides_.size();
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @param index The index of the element to return.
       * @return The strides at the given index.
       */
      public long getStrides(int index) {
        return strides_.getLong(index);
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @param index The index to set the value at.
       * @param value The strides to set.
       * @return This builder for chaining.
       */
      public Builder setStrides(
          int index, long value) {
        
        ensureStridesIsMutable();
        strides_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @param value The strides to add.
       * @return This builder for chaining.
       */
      public Builder addStrides(long value) {
        
        ensureStridesIsMutable();
        strides_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @param values The strides to add.
       * @return This builder for chaining.
       */
      public Builder addAllStrides(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureStridesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, strides_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStrides() {
        strides_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList dilations_ = emptyLongList();
      private void ensureDilationsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          dilations_ = mutableCopy(dilations_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @return A list containing the dilations.
       */
      public java.util.List<java.lang.Long>
          getDilationsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(dilations_) : dilations_;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @return The count of dilations.
       */
      public int getDilationsCount() {
        return dilations_.size();
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @param index The index of the element to return.
       * @return The dilations at the given index.
       */
      public long getDilations(int index) {
        return dilations_.getLong(index);
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @param index The index to set the value at.
       * @param value The dilations to set.
       * @return This builder for chaining.
       */
      public Builder setDilations(
          int index, long value) {
        
        ensureDilationsIsMutable();
        dilations_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @param value The dilations to add.
       * @return This builder for chaining.
       */
      public Builder addDilations(long value) {
        
        ensureDilationsIsMutable();
        dilations_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @param values The dilations to add.
       * @return This builder for chaining.
       */
      public Builder addAllDilations(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDilationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dilations_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDilations() {
        dilations_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int computeMode_ = 0;
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       * @return The enum numeric value on the wire for computeMode.
       */
      @java.lang.Override public int getComputeModeValue() {
        return computeMode_;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       * @param value The enum numeric value on the wire for computeMode to set.
       * @return This builder for chaining.
       */
      public Builder setComputeModeValue(int value) {
        computeMode_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       * @return The computeMode.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.DataType getComputeMode() {
        stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.forNumber(computeMode_);
        return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       * @param value The computeMode to set.
       * @return This builder for chaining.
       */
      public Builder setComputeMode(stream_executor.dnn.Dnn.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        computeMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearComputeMode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        computeMode_ = 0;
        onChanged();
        return this;
      }

      private int groupCount_ ;
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       * @return The groupCount.
       */
      @java.lang.Override
      public int getGroupCount() {
        return groupCount_;
      }
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       * @param value The groupCount to set.
       * @return This builder for chaining.
       */
      public Builder setGroupCount(int value) {
        
        groupCount_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearGroupCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        groupCount_ = 0;
        onChanged();
        return this;
      }

      private int convolutionMode_ = 0;
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       * @return The enum numeric value on the wire for convolutionMode.
       */
      @java.lang.Override public int getConvolutionModeValue() {
        return convolutionMode_;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       * @param value The enum numeric value on the wire for convolutionMode to set.
       * @return This builder for chaining.
       */
      public Builder setConvolutionModeValue(int value) {
        convolutionMode_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       * @return The convolutionMode.
       */
      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode() {
        stream_executor.dnn.Dnn.ConvolutionMode result = stream_executor.dnn.Dnn.ConvolutionMode.forNumber(convolutionMode_);
        return result == null ? stream_executor.dnn.Dnn.ConvolutionMode.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       * @param value The convolutionMode to set.
       * @return This builder for chaining.
       */
      public Builder setConvolutionMode(stream_executor.dnn.Dnn.ConvolutionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        convolutionMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearConvolutionMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        convolutionMode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Tensorflow node name, same as in NodeDef, for debugging purposes.
       * </pre>
       *
       * <code>string name = 7;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Tensorflow node name, same as in NodeDef, for debugging purposes.
       * </pre>
       *
       * <code>string name = 7;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Tensorflow node name, same as in NodeDef, for debugging purposes.
       * </pre>
       *
       * <code>string name = 7;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Tensorflow node name, same as in NodeDef, for debugging purposes.
       * </pre>
       *
       * <code>string name = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Tensorflow node name, same as in NodeDef, for debugging purposes.
       * </pre>
       *
       * <code>string name = 7;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.ConvolutionDescriptorProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.ConvolutionDescriptorProto)
    private static final stream_executor.dnn.Dnn.ConvolutionDescriptorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.ConvolutionDescriptorProto();
    }

    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConvolutionDescriptorProto>
        PARSER = new com.google.protobuf.AbstractParser<ConvolutionDescriptorProto>() {
      @java.lang.Override
      public ConvolutionDescriptorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ConvolutionDescriptorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConvolutionDescriptorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_AlgorithmConfigProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$tensorflow/stream_executor/dnn.proto\022\023" +
      "stream_executor.dnn\032\036google/protobuf/wra" +
      "ppers.proto\"\341\001\n\025TensorDescriptorProto\022\022\n" +
      "\ndimensions\030\001 \003(\003\0220\n\tdata_type\030\002 \001(\0162\035.s" +
      "tream_executor.dnn.DataType\0226\n\013data_layo" +
      "ut\030\003 \001(\0162\037.stream_executor.dnn.DataLayou" +
      "tH\000\022:\n\rfilter_layout\030\004 \001(\0162!.stream_exec" +
      "utor.dnn.FilterLayoutH\000B\016\n\014layout_oneof\"" +
      "\353\002\n\016AlgorithmProto\022\017\n\007algo_id\030\001 \001(\003\022?\n\tm" +
      "ath_type\030\002 \001(\0162,.stream_executor.dnn.Alg" +
      "orithmProto.MathType\022J\n\014tuning_knobs\030\004 \003" +
      "(\01324.stream_executor.dnn.AlgorithmProto." +
      "TuningKnobsEntry\022\031\n\021is_cudnn_frontend\030\005 " +
      "\001(\010\0224\n\016workspace_size\030\006 \001(\0132\034.google.pro" +
      "tobuf.UInt64Value\0322\n\020TuningKnobsEntry\022\013\n" +
      "\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:\0028\001\"0\n\010MathTyp" +
      "e\022\020\n\014DEFAULT_MATH\020\000\022\022\n\016TENSOR_OP_MATH\020\001J" +
      "\004\010\003\020\004\"\375\001\n\024AlgorithmConfigProto\0228\n\talgori" +
      "thm\030\001 \001(\0132#.stream_executor.dnn.Algorith" +
      "mProtoH\000\022C\n\024algorithm_no_scratch\030\002 \001(\0132#" +
      ".stream_executor.dnn.AlgorithmProtoH\001\022\026\n" +
      "\014scratch_size\030\003 \001(\003H\002B\024\n\022optional_algori" +
      "thmB\037\n\035optional_algorithm_no_scratchB\027\n\025" +
      "optional_scratch_size\"\352\001\n\032ConvolutionDes" +
      "criptorProto\022\020\n\010paddings\030\001 \003(\003\022\017\n\007stride" +
      "s\030\002 \003(\003\022\021\n\tdilations\030\003 \003(\003\0223\n\014compute_mo" +
      "de\030\004 \001(\0162\035.stream_executor.dnn.DataType\022" +
      "\023\n\013group_count\030\005 \001(\005\022>\n\020convolution_mode" +
      "\030\006 \001(\0162$.stream_executor.dnn.Convolution" +
      "Mode\022\014\n\004name\030\007 \001(\t*w\n\010DataType\022\n\n\006kFloat" +
      "\020\000\022\013\n\007kDouble\020\001\022\t\n\005kHalf\020\002\022\t\n\005kInt8\020\003\022\n\n" +
      "\006kInt32\020\004\022\021\n\rkComplexFloat\020\005\022\022\n\016kComplex" +
      "Double\020\006\022\t\n\005kBF16\020\007*\201\001\n\nDataLayout\022\021\n\rkY" +
      "XDepthBatch\020\000\022\021\n\rkYXBatchDepth\020\001\022\021\n\rkBat" +
      "chYXDepth\020\002\022\021\n\rkBatchDepthYX\020\003\022\022\n\016kBatch" +
      "DepthYX4\020\004\022\023\n\017kBatchDepthYX32\020\005*\211\001\n\014Filt" +
      "erLayout\022\022\n\016kOutputInputYX\020\000\022\022\n\016kOutputY" +
      "XInput\020\001\022\023\n\017kOutputInputYX4\020\002\022\024\n\020kOutput" +
      "InputYX32\020\005\022\022\n\016kInputYXOutput\020\003\022\022\n\016kYXIn" +
      "putOutput\020\004*f\n\016ActivationMode\022\t\n\005kNone\020\000" +
      "\022\014\n\010kSigmoid\020\001\022\t\n\005kRelu\020\002\022\n\n\006kRelu6\020\003\022\n\n" +
      "\006kReluX\020\004\022\t\n\005kTanh\020\005\022\r\n\tkBandPass\020\006*9\n\017C" +
      "onvolutionMode\022\025\n\021CROSS_CORRELATION\020\000\022\017\n" +
      "\013CONVOLUTION\020\001*p\n\017ConvolutionKind\022\013\n\007INV" +
      "ALID\020\000\022\013\n\007FORWARD\020\001\022\023\n\017BACKWARD_FILTER\020\002" +
      "\022\021\n\rBACKWARD_DATA\020\003\022\033\n\027FORWARD_BIAS_ACTI" +
      "VATION\020\004B@Z>github.com/tensorflow/tensor" +
      "flow/tensorflow/go/stream_executorb\006prot" +
      "o3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
        });
    internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor,
        new java.lang.String[] { "Dimensions", "DataType", "DataLayout", "FilterLayout", "LayoutOneof", });
    internal_static_stream_executor_dnn_AlgorithmProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_AlgorithmProto_descriptor,
        new java.lang.String[] { "AlgoId", "MathType", "TuningKnobs", "IsCudnnFrontend", "WorkspaceSize", });
    internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_descriptor =
      internal_static_stream_executor_dnn_AlgorithmProto_descriptor.getNestedTypes().get(0);
    internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_AlgorithmProto_TuningKnobsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_stream_executor_dnn_AlgorithmConfigProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_AlgorithmConfigProto_descriptor,
        new java.lang.String[] { "Algorithm", "AlgorithmNoScratch", "ScratchSize", "OptionalAlgorithm", "OptionalAlgorithmNoScratch", "OptionalScratchSize", });
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor,
        new java.lang.String[] { "Paddings", "Strides", "Dilations", "ComputeMode", "GroupCount", "ConvolutionMode", "Name", });
    com.google.protobuf.WrappersProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
